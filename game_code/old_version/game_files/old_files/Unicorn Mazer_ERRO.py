import pygame
import pygame.mixer
import time
import random
from random import randrange
# import num6dig
# from num6dig import num6dig

# FUNÇÃO PARA DEIXAR O SCORE SEMPRE COM 6 DIGITOS
def num6dig(num):
    l = ['0','0','0','0','0','0']
    index = 6
    while (num !=0):
        l.insert(index, str(num%10))
        num = num // 10
        index -= 1
    
        l.pop(0)
    return ''.join(l)


# INICIAR E VERIFICAR SE PYGAME ESTA FUNCIONANDO
print('\n\n\nSistema Teste para Desenvolvimentos de Plataformas Interativas')
print('Gustavo Pimenta')
print('\nInicializando PyGame')

try:
    pygame.init()
    print("(+) O Pygame foi Inicializado com sucesso!")
except:
    print("O Sistema Apresentou Dificuldade para Inicializar o Pygame, Aguarde...")
    check_errors = pygame.init()
    if check_errors[1] > 0:
        print("(!)Ops, {0} o Pygame iniciou com algum problema..." . format(check_errors[1]))
        sys.exit(-1)
    else:
        print("(+)O Pygame foi inicializado com sucesso!")
    pygame.init()
    




# PREDEFINIR CORES
color_list=[]
preto = (0,0,0)
branco = (255,255,255)
vermelho = (255,0,0)
azul = (0,0,255)
verde = (0,255,0)
amarelo = (255,255,0)
rosa = (255,15,192)
roxo = (148,0,211)
laranja = (255,127,0)
salmao = (250,127,117)
azul_claro=(173,216,230)
marrom = (150,75,0)
vinho = (94,33,41)

color_list.append(preto)
color_list.append(branco)
color_list.append(vermelho)
color_list.append(azul)
color_list.append(verde)
color_list.append(amarelo)
color_list.append(rosa)
color_list.append(roxo)
color_list.append(laranja)
color_list.append(salmao)
color_list.append(azul_claro)
color_list.append(marrom)
color_list.append(vinho)



# CARREGA AS IMAGENS DO JOGO
try:
    uni_right = pygame.image.load('uni_right.png')
    print('\nSucesso ao carregar a imagem uni_right.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem uni_right.png')

try:
    uni_left = pygame.image.load('uni_left.png')
    print('\nSucesso ao carregar a imagem uni_left.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem uni_left.png')

try:
    cup = pygame.image.load('cup.png')
    print('\nSucesso ao carregar a imagem cup.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem cup.png')

try:
    big_uni_left = pygame.image.load('big_uni_left.png')
    print('\nSucesso ao carregar a imagem big_uni_left.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem big_uni_left.png')

try:
    big_uni_right = pygame.image.load('big_uni_right.png')
    print('\nSucesso ao carregar a imagem big_uni_right.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem big_uni_right.png')

try:
    big_cup = pygame.image.load('big_cup.png')
    print('\nSucesso ao carregar a imagem big_cup.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem big_cup.png')

try:
    start_image = pygame.image.load('start_image.png')
    print('\nSucesso ao carregar a imagem start_image.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem start_image.png')

try:
    giant_cup = pygame.image.load('giant_cup.png')
    print('\nSucesso ao carregar a imagem giant_cup.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem giant_cup.png')

try:
    mino = pygame.image.load('mino.png')
    print('\nSucesso ao carregar a imagem mino.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem mino.png')

try:
    big_mino = pygame.image.load('big_mino.png')
    print('\nSucesso ao carregar a imagem big_mino.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem big_mino.png')

try:
    dead = pygame.image.load('dead.png')
    print('\nSucesso ao carregar a imagem dead.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem dead.png')

try:
    cof = pygame.image.load('cof.png')
    print('\nSucesso ao carregar a imagem cof.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem cof.png')

try:
    big_cof = pygame.image.load('big_cof.png')
    print('\nSucesso ao carregar a imagem big_cof.png')
except:
    print('\nERRO')
    print('Falha ao carregar a imagem big_cof.png')




# INICIA O SISTEMA DE AUDIO E CARREGA OS SONS
pygame.mixer.init()
canal1=pygame.mixer.Channel(0)
canal2=pygame.mixer.Channel(1)
intro = pygame.mixer.Sound('intro.wav')
build_sound = pygame.mixer.Sound('build_sound.wav')
cof_sound = pygame.mixer.Sound('cof_sound.wav')
tema = pygame.mixer.Sound('tema.wav')
win = pygame.mixer.Sound('win.wav')
lose = pygame.mixer.Sound('lose.wav')


# MAPAS DOS LABIRINTOS

# borda_esquerda=[(0,760),(0,720),(0,680),(0,640),(0,600),(0,560),(0,520),(0,480),(0,440),(0,400),(0,360),(0,320),(0,280),(0,240),(0,200),(0,160),(0,120),(0,80),(0,40),(0,0)]
# borda_direita=[(760,760),(760,720),(760,680),(760,640),(760,600),(760,560),(760,520),(760,480),(760,440),(760,400),(760,360),(760,320),(760,280),(760,240),(760,200),(760,160),(760,120),(760,80),(760,40),(760,0)]
# borda_superior=[(760,0),(720,0),(680,0),(640,0),(600,0),(560,0),(520,0),(480,0),(440,0),(400,0),(360,0),(320,0),(280,0),(240,0),(200,0),(160,0),(120,0),(80,0),(40,0),(0,0)]
# borda_inferior=[(760,760),(720,760),(680,760),(640,760),(600,760),(560,760),(520,760),(480,760),(440,760),(400,760),(360,760),(320,760),(280,760),(240,760),(200,760),(160,760),(120,760),(80,760),(40,760),(0,760)]

maze1=[(240,280),(240,40),(120,240),(320,200),(400,120),(400,200),(280,360),(320,360),(680,440),(0,760),(0,720),(0,680),(0,640),(0,600),(0,560),(0,520),(0,480),(0,440),(0,400),
(0,360),(0,320),(0,280),(0,240),(0,200),(0,160),(0,120),(0,80),(0,40),(0,0),(760,760),(760,720),(760,680),(760,640),(760,600),(760,560),(760,520),(760,480),(760,440),(760,400),
(760,360),(760,320),(760,280),(760,240),(760,200),(760,160),(760,120),(760,80),(760,40),(760,0),(760,0),(720,0),(680,0),(640,0),(600,0),(560,0),(520,0),(480,0),(440,0),(400,0),
(360,0),(320,0),(280,0),(240,0),(200,0),(160,0),(120,0),(80,0),(40,0),(0,0),(760,760),(720,760),(680,760),(640,760),(600,760),(560,760),(520,760),(480,760),(440,760),(400,760),
(360,760),(320,760),(280,760),(240,760),(200,760),(160,760),(120,760),(80,760),(40,760),(0,760),(80,160),(80,120),(80,80),(80,240),(80,200),(120,120),(160,120),(240,120),(280,120),
(360,120),(240,80),(160,40),(320,40),(440,80),(440,120),(480,120),(520,120),(560,120),(600,80),(600,120),(640,80),(680,80),(680,120),(680,160),(680,200),(680,240),(640,240),
(640,280),(640,320),(640,360),(640,400),(680,400),(720,320),(360,160),(360,200),(360,240),(280,200),(240,200),(200,200),(160,200),(160,240),(40,480),(80,480),(80,440),(80,400),
(80,360),(80,320),(120,320),(160,320),(200,320),(240,320),(240,360),(280,280),(360,320),(360,360),(400,360),(440,360),(480,360),(520,360),(560,360),(560,320),(560,240),(560,200),
(520,200),(480,200),(440,200),(440,240),(440,280),(480,280),(160,400),(160,440),(200,440),(240,440),(280,440),(320,440),(320,480),(320,520),(360,440),(400,440),(440,440),(480,440),
(520,440),(520,400),(600,480),(640,480),(680,480),(720,480),(560,560),(600,560),(640,560),(680,560),(680,600),(680,640),(680,680),(640,680),(600,680),(600,640),(560,640),(520,640),
(480,600),(480,640),(480,560),(480,520),(480,480),(520,720),(400,720),(400,680),(320,720),(320,680),(320,640),(240,600),(240,560),(240,520),(280,600),(320,600),(360,600),(400,600),
(400,560),(400,520),(320,520),(320,520),(160,600),(160,560),(120,560),(80,560),(80,600),(80,640),(80,680),(120,680),(160,680),(200,680),(240,680),(240,720)]
maze1_random = maze1
random.shuffle(maze1_random)


maze2=[(560,160),(0,760),(0,720),(0,680),(0,640),(0,600),(0,560),(0,520),(0,480),(0,440),(0,400),(0,360),(0,320),(0,280),(0,240),(0,200),(0,160),(0,120),(0,80),(0,40),(0,0),(760,760),
(760,720),(760,680),(760,640),(760,600),(760,560),(760,520),(760,480),(760,440),(760,400),(760,360),(760,320),(760,280),(760,240),(760,200),(760,160),(760,120),(760,80),(760,40),
(760,0),(760,0),(720,0),(680,0),(640,0),(600,0),(560,0),(520,0),(480,0),(440,0),(400,0),(360,0),(320,0),(280,0),(240,0),(200,0),(160,0),(120,0),(80,0),(40,0),(760,760),
(720,760),(680,760),(640,760),(600,760),(560,760),(520,760),(480,760),(440,760),(400,760),(360,760),(320,760),(280,760),(240,760),(200,760),(160,760),(120,760),(80,760),(40,760),
(0,760),(40,80),(120,80),(120,120),(120,160),(160,160),(80,160),(40,160),(40,240),(120,240),(160,240),(200,80),(240,40),(240,80),(240,120),(240,160),(240,200),(240,240),(240,280),
(320,280),(320,160),(280,160),(320,200),(320,120),(320,80),(400,40),(360,120),(400,120),(80,320),(120,320),(160,320),(160,280),(160,360),(160,400),(160,440),(200,320),(240,320),
(280,320),(320,320),(480,40),(480,80),(480,120),(520,120),(560,120),(560,80),(600,80),(640,80),(680,80),(600,160),(640,160),(680,160),(600,240),(640,240),(680,240),(680,200),
(680,280),(680,320),(680,360),(400,200),(400,240),(440,240),(480,240),(480,200),(520,240),(440,280),(400,320),(440,320),(480,320),(520,320),(560,320),(600,320),(560,360),(560,400),
(560,440),(520,440),(520,480),(520,520),(480,440),(440,400),(440,440),(400,400),(360,400),(320,400),(280,400),(240,400),(240,440),(240,480),(240,520),(200,520),(160,520),(120,520),
(80,520),(80,480),(40,480),(80,440),(80,400),(160,560),(160,600),(200,600),(200,640),(200,680),(240,600),(280,600),(320,600),(360,600),(320,560),(320,520),(320,480),(360,480),
(280,680),(280,720),(80,600),(80,640),(80,680),(120,680),(120,720),(360,680),(400,680),(440,680),(480,680),(520,680),(560,680),(440,640),(440,600),(440,560),(440,520),(440,480),
(520,600),(520,640),(560,600),(600,600),(640,600),(640,640),(640,680),(680,640),(720,720),(720,560),(720,520),(680,520),(640,520),(600,520),(680,480),(680,440),(640,440)]
maze2_random = maze2
random.shuffle(maze2_random)


maze3=[(280,80),(80,80),(200,40),(200,80),(160,80),(120,80),(80,120),(80,160),(80,240),(80,280),(80,320),(80,360),(80,400),(80,440),(80,480),(80,520),(80,560),(80,600),(80,640),(80,680),
(120,680),(160,680),(200,680),(200,640),(200,600),(160,600),(160,560),(240,600),(280,600),(160,480),(160,440),(160,400),(160,360),(200,440),(160,280),(160,240),(160,200),(160,160),
(200,160),(240,160),(280,160),(280,120),(240,80),(320,80),(360,80),(400,80),(440,80),(480,80),(320,160),(360,160),(400,160),(440,160),(480,160),(480,200),(520,160),(560,160),
(600,160),(600,200),(320,240),(280,240),(240,240),(240,280),(240,280),(240,360),(240,320),(240,400),(240,440),(240,480),(240,520),(280,520),(320,520),(320,440),(320,400),(280,400),
(320,360),(320,320),(360,320),(400,320),(440,320),(440,360),(440,400),(440,440),(400,440),(360,520),(400,520),(440,520),(480,520),(520,520),(520,480),(480,360),(520,400),(520,360),
(520,320),(520,280),(520,240),(480,240),(440,240),(400,240),(600,280),(600,320),(600,360),(600,400),(600,440),(600,480),(600,520),(600,560),(600,600),(560,600),(520,600),(520,600),
(480,600),(440,600),(440,560),(400,600),(360,600),(640,360),(560,80),(600,80),(640,80),(680,80),(680,120),(680,160),(680,200),(680,240),(680,280),(680,320),(680,360),(680,400),
(680,480),(680,520),(680,560),(680,600),(680,640),(680,680),(640,680),(600,680),(720,600),(520,680),(480,680),(440,680),(400,680),(360,680),(320,680),(280,680),(240,680),(160,680),
(400,720),(0,760),(0,720),(0,680),(0,640),(0,600),(0,560),(0,520),(0,480),(0,440),(0,400),(0,360),(0,320),(0,280),(0,240),(0,200),(0,160),(0,120),(0,80),(0,40),(0,0),(760,760),
(760,720),(760,680),(760,640),(760,600),(760,560),(760,520),(760,480),(760,440),(760,400),(760,360),(760,320),(760,280),(760,240),(760,200),(760,160),(760,120),(760,80),(760,40),
(760,0),(720,0),(680,0),(640,0),(600,0),(560,0),(520,0),(480,0),(440,0),(400,0),(360,0),(320,0),(280,0),(240,0),(200,0),(160,0),(120,0),(80,0),(40,0),(0,0),(760,760),(720,760),
(680,760),(640,760),(600,760),(560,760),(520,760),(480,760),(440,760),(400,760),(360,760),(320,760),(280,760),(240,760),(200,760),(160,760),(120,760),(80,760),(40,760),(0,760)]
maze3_random = maze3
random.shuffle(maze3_random)


maze4=[(80,80),(120,80),(160,80),(200,80),(240,80),(280,80),(320,80),(320,120),(320,160),(360,160),(280,160),(240,160),(240,200),(240,240),(240,280),(240,320),(80,320),(80,280),
(80,240),(80,200),(80,160),(120,160),(160,160),(200,160),(400,160),(440,160),(440,120),(440,80),(480,80),(520,80),(560,80),(600,80),(640,80),(480,160),(520,160),(560,160),(600,160),
(640,160),(680,160),(680,200),(680,240),(680,280),(680,320),(520,200),(520,240),(520,280),(520,320),(40,400),(80,400),(120,400),(160,400),(200,400),(240,400),(280,400),(320,400),
(320,360),(320,320),(320,280),(320,240),(440,240),(440,280),(440,320),(440,360),(440,400),(480,400),(520,400),(560,400),(600,400),(640,400),(680,400),(80,760),(40,760),(0,760),
(720,400),(680,480),(640,480),(600,480),(560,480),(520,480),(480,480),(440,480),(400,480),(360,480),(320,480),(280,480),(240,480),(200,480),(160,480),(120,480),(80,480),(40,560),
(80,560),(120,560),(160,560),(200,560),(240,560),(280,560),(320,560),(440,560),(480,560),(520,560),(560,560),(600,560),(640,560),(680,560),(720,560),(680,680),(640,680),(600,680),
(560,680),(520,680),(480,680),(440,680),(440,640),(400,640),(360,640),(320,640),(320,680),(280,680),(240,680),(200,680),(160,680),(120,680),(80,680),(80,640),(680,640),(600,600),
(520,640),(160,600),(240,640),(0,760),(0,720),(0,680),(0,640),(0,600),(0,560),(0,520),(0,480),(0,440),(0,400),(0,360),(0,320),(0,280),(0,240),(0,200),(0,160),(0,120),(0,80),(0,40),
(0,0),(760,760),(760,720),(760,680),(760,640),(760,600),(760,560),(760,520),(760,480),(760,440),(760,400),(760,360),(760,320),(760,280),(760,240),(760,200),(760,160),(760,120),
(760,80),(760,40),(760,0),(760,0),(720,0),(680,0),(640,0),(600,0),(560,0),(520,0),(480,0),(440,0),(400,0),(360,0),(320,0),(280,0),(240,0),(200,0),(160,0),(120,0),(80,0),(40,0),
(0,0),(760,760),(720,760),(680,760),(640,760),(600,760),(560,760),(520,760),(480,760),(440,760),(400,760),(360,760),(320,760),(280,760),(240,760),(200,760),(160,760),(120,760)]
maze4_random = maze4
random.shuffle(maze4_random)

maze5=[(160,40),(160,80),(160,120),(160,160),(80,160),(80,200),(80,240),(120,240),(160,240),(200,240),(240,240),(240,200),(240,160),(240,80),(240,40),
(400,40),(400,80),(440,80),(400,120),(360,120),(320,120),(320,160),(320,200),(360,200),(440,200),(440,240),(480,240),(480,200),(520,200),(560,200),(520,160),(520,120),(520,80),
(560,80),(600,80),(640,80),(680,80),(720,160),(640,120),(640,160),(720,240),(680,240),(680,280),(640,240),(520,240),(520,280),(520,320),(520,360),(560,360),(600,360),(600,320),
(640,360),(680,360),(680,400),(680,440),(680,480),(600,560),(600,520),(600,440),(600,480),(560,440),(520,440),(440,440),(440,400),(440,320),(400,320),(360,320),(360,360),(320,320),
(320,280),(280,320),(280,360),(240,320),(200,320),(200,360),(160,360),(80,360),(80,320),(80,440),(120,440),(120,480),(120,520),(160,480),(200,480),(240,480),(240,440),(320,440),
(360,440),(320,480),(320,520),(400,520),(480,520),(520,520),(520,560),(520,600),(520,640),(560,640),(600,640),(600,680),(640,640),(680,640),(680,600),(680,560),(520,720),
(440,720),(440,680),(440,640),(360,680),(360,640),(400,560),(360,560),(320,560),(280,560),(240,560),(240,600),(200,600),(160,600),(120,600),(80,600),(120,640),(120,680),(160,680),(40,520),(280,720),(240,680),(280,680),(0,760),(0,720),(0,680),(0,640),(0,600),(0,560),(0,520),(0,480),(0,440),(0,400),(0,360),(0,320),(0,280),(0,240),(0,200),(0,160),
(0,120),(0,80),(0,40),(0,0),(760,760),(760,720),(760,680),(760,640),(760,600),(760,560),(760,520),(760,480),(760,440),(760,400),(760,360),(760,320),(760,280),(760,240),(760,200),
(760,160),(760,120),(760,80),(760,40),(760,0),(760,0),(720,0),(680,0),(640,0),(600,0),(560,0),(520,0),(480,0),(440,0),(400,0),(360,0),(320,0),(280,0),(240,0),(200,0),(160,0),
(120,0),(80,0),(40,0),(0,0),(760,760),(720,760),(680,760),(640,760),(600,760),(560,760),(520,760),(480,760),(440,760),(400,760),(360,760),(320,760),(280,760),(240,760),(200,760),
(160,760),(120,760),(80,760),(40,760),(0,760)]
maze5_random = maze5
random.shuffle(maze5_random)

maze6_1=[(80,40),(80,80),(200,80),(160,80),(160,120),(160,160),(120,160),(80,160),(80,200),(80,240),
(120,240),(120,280),(120,320),(80,320),(40,320),(40,400),(80,400),(120,400),(120,440),(120,480),(80,480),
(0,520),(80,560),(80,560),(80,600),(80,640),(120,640),(160,640),(200,640),(160,680),(160,560),(240,520),
(240,560),(280,560),(320,560),(320,480),(240,440),(240,400),(200,400),(240,360),(320,400),(320,360),
(320,320),(320,280),(320,240),(320,200),(320,160),(280,160),(240,160),(280,200),(280,240),(240,240),
(200,240),(200,280),(480,440),(520,440),(560,440),(600,440),(600,400),(640,400),(680,400),(680,360),
(720,360),(680,280),(680,240),(680,200),(680,160),(680,120),(680,80),(480,360),(520,360),(520,320),
(520,280),(560,320),(600,320),(600,280),(600,240),(600,200),(600,160),(600,120),(600,80),(600,40),
(720,480),(720,520),(720,640),(680,640),(680,600),(640,600),(600,600),(600,680),(520,600),(480,600),
(480,640),(480,680),(520,680),(440,680),(360,680),(360,640),(320,640),(280,640),(240,720),(80,720),
(560,520),(600,520),(640,520),(400,520),(400,560),(440,520),(160,280),(360,160),(400,160),(440,160),
(280,80),(320,80),(360,80),(400,80),(440,80),(440,40),(400,80),(440,80),(520,80),(520,120),(520,160),
(520,200),(480,160),(440,200),(440,240),(440,280),(400,280),(400,320),(400,360),(400,400),(400,440),
(440,440),(0,760),(0,720),(0,680),(0,640),(0,600),(0,560),(0,520),(0,480),(0,440),(0,400),(0,360),(0,320),
(0,280),(0,240),(0,200),(0,160),(0,120),(0,80),(0,40),(0,0),(760,760),(760,720),(760,680),(760,640),(760,600),
(760,560),(760,520),(760,480),(760,400),(760,360),(760,280),(760,240),(760,200),(760,160),
(760,120),(760,80),(760,40),(760,0),(760,0),(720,0),(680,0),(640,0),(600,0),(560,0),(520,0),(480,0),(440,0),
(400,0),(360,0),(320,0),(280,0),(240,0),(200,0),(160,0),(120,0),(80,0),(40,0),(0,0),(760,760),(720,760),(680,760),
(640,760),(600,760),(560,760),(520,760),(480,760),(440,760),(400,760),(360,760),(320,760),(280,760),(240,760),(200,760),
(160,760),(120,760),(80,760),(40,760),(0,760)]
maze6_1_random = maze6_1
random.shuffle(maze6_1_random)

maze6_2=[(40,680),(80,680),(120,680),(160,680),(200,680),(240,680),(280,680),(360,720),(360,680),(360,640),(360,600),(320,600),
(280,600),(240,600),(200,600),(160,600),(120,600),(80,600),(160,560),(160,520),(160,480),(160,440),(160,400),(160,360),(160,320),
(160,280),(80,520),(80,480),(80,400),(40,400),(80,360),(80,320),(80,280),(80,240),(80,200),(120,200),(120,160),(120,120),(80,120),
(160,80),(160,120),(200,120),(160,200),(200,200),(240,200),(240,240),(240,280),(240,320),(240,360),(240,400),(240,440),(240,480),
(240,520),(280,440),(320,440),(360,440),(400,440),(440,440),(480,440),(520,440),(520,520),(480,480),(480,520),(480,560),(480,600),
(440,520),(400,520),(360,520),(440,680),(480,680),(520,680),(560,680),(600,680),(600,640),(600,600),(560,600),(600,560),(600,520),
(600,480),(680,680),(680,720),(680,600),(680,560),(680,520),(680,480),(720,480),(680,440),(680,400),(680,360),(680,320),(680,280),
(640,280),(600,280),(560,280),(520,280),(480,280),(440,280),(400,280),(360,280),(320,280),(320,320),(320,360),(440,360),(480,360),
(520,360),(560,360),(600,360),(600,400),(680,240),(680,200),(680,160),(680,120),(680,80),(600,80),(600,120),(600,40),(600,160),
(600,200),(520,200),(520,240),(520,160),(520,120),(520,80),(440,80),(440,120),(440,160),(440,200),(400,200),(440,200),(360,200),
(320,200),(320,160),(280,80),(320,80),(360,80),(400,80),(360,40),(0,760),(0,720),(0,680),(0,640),(0,600),(0,560),(0,520),(0,480),
(0,400),(0,360),(0,280),(0,240),(0,200),(0,160),(0,120),(0,80),(0,40),(0,0),(760,760),(760,720),(760,680),(760,640),
(760,600),(760,560),(760,520),(760,480),(760,440),(760,400),(760,360),(760,320),(760,280),(760,240),(760,200),(760,160),(760,120),
(760,80),(760,40),(760,0),(760,0),(720,0),(680,0),(640,0),(600,0),(560,0),(520,0),(480,0),(440,0),(400,0),(360,0),(320,0),(280,0),
(240,0),(200,0),(160,0),(120,0),(80,0),(40,0),(0,0),(760,760),(720,760),(680,760),(640,760),(600,760),(560,760),(520,760),(480,760),
(440,760),(400,760),(360,760),(320,760),(280,760),(240,760),(200,760),(160,760),(120,760),(80,760),(40,760),(0,760)]


maze7=[(0,0),(20,0),(40,0),(60,0),(80,0),(100,0),(120,0),(140,0),(160,0),(180,0),(200,0),
(220,0),(240,0),(260,0),(280,0),(300,0),(320,0),(340,0),(360,0),(380,0),(400,0),(420,0),
(440,0),(460,0),(480,0),(500,0),(520,0),(540,0),(560,0),(580,0),(600,0),(620,0),(640,0),
(660,0),(680,0),(700,0),(720,0),(740,0),(760,0),(780,0),(780,20),(780,40),(780,60),(780,80),
(780,100),(780,120),(780,140),(780,160),(780,180),(780,200),(780,220),(780,240),(780,260),
(780,280),(780,300),(780,320),(780,340),(780,360),(780,380),(780,400),(780,420),(780,440),
(780,460),(780,480),(780,500),(780,520),(780,540),(780,560),(780,580),(780,600),(780,620),
(780,640),(780,660),(780,680),(780,700),(780,720),(780,740),(780,760),(780,780),(0,780),
(20,780),(40,780),(60,780),(80,780),(100,780),(120,780),(140,780),(160,780),(180,780),(200,780),
(220,780),(240,780),(260,780),(280,780),(300,780),(320,780),(340,780),(360,780),(380,780),
(400,780),(420,780),(440,780),(460,780),(480,780),(500,780),(520,780),(540,780),(560,780),
(580,780),(600,780),(620,780),(640,780),(660,780),(680,780),(700,780),(720,780),(740,780),
(760,780),(0,20),(0,40),(0,60),(0,80),(0,100),(0,120),(0,140),(0,160),(0,180),(0,200),
(0,220),(0,240),(0,260),(0,280),(0,300),(0,320),(0,340),(0,360),(0,380),(0,400),
(0,420),(0,440),(0,460),(0,480),(0,500),(0,520),(0,540),(0,560),(0,580),(0,600),(0,620),
(0,640),(0,660),(0,680),(0,700),(0,720),(0,740),(0,760),(40,40),(60,40),(80,40),(100,40),
(120,40),(140,40),(160,40),(180,40),(200,40),(220,40),(240,40),(260,40),(280,40),(300,40),
(400,20),(340,40),(360,40),(380,40),(400,40),(420,40),(440,40),(460,40),(480,40),(500,40),
(520,40),(540,40),(480,60),(580,40),(600,40),(620,40),(640,40),(660,40),(680,40),(700,40),
(720,40),(740,40),(740,60),(740,80),(740,100),(740,120),(660,80),(680,80),(700,80),(700,100),
(700,120),(160,80),(180,80),(200,80),(220,80),(240,80),(260,80),(280,80),(300,80),(320,80),
(340,80),(360,80),(380,80),(400,80),(420,80),(440,80),(460,80),(480,80),(500,80),(520,80),
(540,80),(560,80),(580,80),(600,80),(620,80),(220,60),(300,100),(220,120),(240,120),(260,120),
(280,120),(300,120),(320,120),(340,120),(360,120),(400,120),(420,120),(440,120),
(460,120),(480,120),(500,120),(520,120),(540,120),(560,120),(580,120),(600,120),(620,120),
(640,120),(660,120),(600,140),(680,140),(660,140),(660,160),(660,180),(660,200),(700,140),
(700,160),(700,180),(700,200),(700,220),(700,240),(700,260),(700,280),(700,300),(700,320),
(700,340),(680,320),(740,160),(740,180),(740,200),(740,220),(740,240),(740,260),(740,280),
(740,300),(740,320),(740,340),(740,360),(740,380),(740,400),(740,420),(760,220),(620,160),
(620,180),(620,200),(160,160),(180,160),(200,160),(220,160),(240,160),(260,160),(280,160),
(300,160),(320,160),(340,160),(360,160),(380,160),(400,160),(420,160),(440,160),(460,160),
(480,160),(500,160),(520,160),(540,160),(560,160),(580,160),(600,160),(160,180),(160,200),
(160,220),(160,240),(160,260),(160,280),(160,300),(200,200),(220,200),(240,200),(260,200),
(280,200),(300,200),(320,200),(340,200),(360,200),(380,200),(400,200),(420,200),(440,200),
(460,200),(480,200),(500,200),(540,200),(560,200),(580,200),(300,220),(240,240),(240,260),
(260,240),(280,240),(300,240),(320,240),(340,240),(360,240),(380,240),(400,240),(420,240),
(440,240),(460,240),(480,240),(500,240),(520,240),(540,240),(540,260),(540,280),(540,300),
(540,320),(540,340),(580,220),(580,240),(580,260),(580,280),(580,300),(580,320),(580,340),
(580,360),(580,380),(580,400),(580,420),(580,440),(580,460),(580,480),(580,500),(560,460),
(700,380),(700,400),(700,420),(700,440),(700,460),(700,480),(660,320),(660,340),(660,360),
(660,380),(660,400),(660,420),(660,440),(660,460),(660,480),(660,500),(660,520),(660,540),
(660,240),(660,260),(660,280),(660,300),(740,460),(740,480),(740,500),(740,520),(740,540),
(740,560),(740,580),(740,600),(740,620),(740,640),(740,660),(760,640),(700,520),(700,540),
(700,560),(700,580),(700,600),(700,620),(700,640),(700,660),(660,560),(660,600),(660,620),
(660,640),(660,660),(120,660),(140,660),(160,660),(180,660),(200,660),(220,660),(240,660),
(260,660),(280,660),(300,660),(320,660),(340,660),(360,660),(380,660),(400,660),(420,660),
(440,660),(460,660),(480,660),(500,660),(520,660),(540,660),(560,660),(580,660),(600,660),
(620,660),(640,660),(120,640),(120,620),(120,600),(120,440),(120,460),(120,480),(120,500),
(120,520),(120,540),(120,560),(100,500),(140,440),(160,440),(160,460),(160,480),(160,500),
(160,520),(160,540),(160,560),(160,580),(160,600),(160,620),(180,620),(200,620),(220,620),
(240,620),(260,620),(280,620),(300,620),(320,620),(340,620),(360,620),(380,620),(400,620),
(420,620),(440,620),(460,620),(480,620),(500,620),(540,620),(560,620),(580,620),(600,620),
(620,620),(600,640),(620,220),(620,240),(620,260),(620,280),(620,300),(620,320),(620,340),
(620,360),(620,380),(620,400),(620,420),(620,440),(620,460),(620,480),(620,500),(620,520),
(620,540),(620,560),(620,580),(620,600),(280,280),(300,280),(320,280),(340,280),(360,280),
(380,280),(400,280),(420,280),(460,280),(480,280),(500,280),(500,300),(520,300),(500,320),
(500,340),(500,360),(500,380),(540,380),(320,320),(340,320),(360,320),(380,320),(400,320),
(420,320),(440,320),(460,320),(380,340),(380,360),(400,360),(420,360),(460,340),(460,360),
(480,340),(460,380),(360,380),(360,360),(320,340),(320,360),(320,380),(280,300),(280,320),
(280,340),(280,360),(280,380),(240,300),(240,320),(240,340),(240,360),(240,380),(260,380),
(200,220),(200,240),(200,260),(200,280),(200,300),(200,320),(200,340),(200,360),(200,380),
(120,240),(120,260),(120,280),(120,300),(120,320),(120,340),(120,360),(120,380),(100,280),
(80,360),(80,380),(40,240),(40,260),(40,280),(40,300),(40,320),(40,340),(40,360),(40,380),
(80,160),(80,180),(80,200),(80,220),(80,240),(80,260),(80,280),(80,300),(80,320),(40,160),
(40,180),(40,200),(120,160),(120,180),(120,200),(80,120),(100,120),(120,120),(140,120),(160,120),
(180,120),(120,140),(80,140),(40,60),(40,80),(40,100),(40,120),(40,140),(80,80),(100,80),
(120,80),(80,100),(120,400),(120,420),(160,400),(160,420),(160,340),(160,360),(160,380),(40,740),
(60,740),(80,740),(100,740),(120,740),(140,740),(160,740),(180,740),(200,740),(220,740),(240,740),
(260,740),(280,740),(300,740),(320,740),(340,740),(360,740),(380,740),(400,740),(420,740),
(440,740),(460,740),(480,740),(500,740),(520,740),(540,740),(560,740),(600,740),(620,740),
(640,740),(660,740),(680,740),(700,740),(720,740),(740,740),(740,680),(740,700),(740,720),
(700,680),(420,700),(440,700),(460,700),(480,700),(500,700),(520,700),(540,700),(560,700),
(580,700),(600,700),(620,700),(640,700),(660,700),(680,700),(700,700),(500,720),(280,680),
(260,700),(280,700),(300,700),(320,700),(340,700),(360,700),(380,700),(80,700),(100,700),
(120,700),(140,700),(160,700),(180,700),(200,700),(220,700),(40,660),(40,680),(40,700),(40,720),
(80,600),(80,620),(80,640),(80,660),(80,680),(40,620),(40,600),(360,600),(80,480),(80,500),
(80,520),(80,540),(80,560),(80,580),(40,420),(40,440),(40,460),(40,480),(40,500),(40,520),
(40,540),(40,560),(40,580),(80,400),(80,420),(80,440),(40,400),(60,400),(720,400),(120,760),
(220,580),(240,580),(260,580),(280,580),(300,580),(320,580),(340,580),(360,580),
(380,580),(400,580),(420,580),(440,580),(460,580),(480,580),(500,580),(520,580),
(540,580),(560,580),(580,580),(360,380),(420,380),(420,400),(420,420),(400,420),(460,380),
(460,360),(500,360),(500,380),(500,400),(500,420),(500,440),(500,460),(500,480),(500,500),
(480,500),(460,500),(440,500),(420,500),(400,500),(380,500),(360,500),(340,500),(320,500),
(300,500),(280,500),(280,480),(280,460),(280,440),(280,420),(280,400),(280,380),(260,380),
(240,380),(240,400),(240,420),(240,440),(240,460),(240,480),(240,500),(240,520),(240,540),
(260,540),(280,540),(300,540),(320,540),(340,540),(360,540),(380,540),(380,540),(400,540),
(420,540),(440,540),(460,540),(480,540),(500,540),(520,540),(540,540),(540,520),(540,500),
(540,480),(540,460),(540,440),(540,420),(560,460),(580,460),(580,480),(580,500),(580,540),
(580,560),(360,600),(200,580),(200,560),(200,540),(200,520),(200,500),(200,480),(200,460),
(200,420),(200,440),(200,400),(200,380),(620,620),(620,600),(620,580),(620,560),(620,540),
(620,520),(620,500),(620,600),(600,620),(580,620),(560,620),(540,620),(600,640),(600,660),
(580,660),(560,660),(540,660),(520,660),(500,660),(480,660),(460,660),(500,620),(480,620),
(460,620),(440,620),(420,620),(400,620),(380,620),(360,620),(340,620),(460,420),(460,440),
(460,460),(440,460),(420,460),(400,460),(380,460),(360,460),(340,460),(320,460),(320,440),
(320,420),(320,400),(320,380),(360,420),(360,400),(320,720),(600,280),(540,360)]
maze7_random = maze7
random.shuffle(maze7_random)

maze8_1=[(0,0),(20,0),(40,0),(60,0),(80,0),(100,0),(120,0),(140,0),(160,0),(180,0),(200,0),(220,0),(240,0),(260,0),(280,0),
(300,0),(320,0),(340,0),(360,0),(380,0),(400,0),(420,0),(440,0),(460,0),(480,0),(500,0),(520,0),(540,0),(560,0),(580,0),(600,0),
(620,0),(640,0),(660,0),(680,0),(700,0),(720,0),(740,0),(760,0),(780,0),(780,20),(780,40),(780,60),(780,80),(780,100),(780,120),
(780,140),(780,160),(780,180),(780,200),(780,220),(780,240),(780,260),(780,280),(780,300),(780,320),(780,340),(780,360),(780,380),
(780,400),(780,420),(780,440),(780,460),(780,480),(780,500),(780,520),(780,540),(780,560),(780,580),(780,600),(780,620),(780,640),
(780,660),(780,680),(780,700),(780,720),(780,740),(780,760),(780,780),(0,780),(20,780),(40,780),(60,780),(80,780),(100,780),(120,780),
(140,780),(160,780),(180,780),(200,780),(220,780),(240,780),(260,780),(280,780),(300,780),(320,780),(340,780),(360,780),(380,780),
(400,780),(420,780),(440,780),(460,780),(480,780),(500,780),(520,780),(540,780),(560,780),(580,780),(600,780),(620,780),(640,780),
(660,780),(680,780),(720,780),(740,780),(760,780),(0,20),(0,40),(0,60),(0,80),(0,100),(0,120),(0,140),(0,160),(0,180),
(0,200),(0,220),(0,240),(0,260),(0,280),(0,300),(0,320),(0,340),(0,360),(0,380),(0,400),(0,420),(0,440),(0,460),(0,480),(0,500),
(0,520),(0,540),(0,560),(0,580),(0,600),(0,620),(0,640),(0,660),(0,680),(0,700),(0,720),(0,740),(0,760),(740,80),(760,80),(700,40),
(700,20),(560,40),(580,40),(600,40),(620,40),(640,40),(260,40),(280,40),(300,40),(320,40),(340,40),(360,40),(380,40),(400,40),
(420,40),(440,40),(480,40),(500,40),(520,40),(40,40),(60,40),(80,40),(100,40),(120,40),(140,40),(160,40),(180,40),(200,40),
(220,40),(40,60),(40,100),(40,120),(40,140),(40,160),(40,180),(40,200),(40,220),(40,240),(40,260),(40,280),(40,300),(40,320),
(40,340),(40,360),(40,380),(40,400),(40,420),(40,440),(40,460),(40,480),(40,500),(40,520),(40,540),(40,560),(40,600),(40,620),
(40,640),(40,660),(40,680),(40,700),(40,720),(40,740),(60,740),(80,740),(100,740),(120,740),(140,740),(160,740),(180,740),(200,740),
(220,740),(260,740),(280,740),(300,740),(320,740),(340,740),(360,740),(380,740),(400,740),(440,740),(460,740),(480,740),
(500,740),(520,740),(540,740),(560,740),(580,740),(600,740),(620,740),(640,740),(660,740),(680,740),(700,740),(720,740),(740,740),
(740,140),(740,160),(740,220),(740,240),(740,260),(740,280),(740,300),(740,320),(740,340),(740,360),(740,380),
(740,400),(740,440),(740,460),(740,480),(740,500),(740,520),(740,540),(740,560),(740,580),(740,600),(740,620),(740,640),
(740,660),(740,680),(740,700),(740,720),(740,120),(740,120),(740,140),(740,160),(740,180),(740,200),(740,420),
(740,540),(740,560),(740,580),(740,600),(740,620),(740,640),(740,660),(740,680),(740,700),(740,720),(40,600),(40,620),(40,640),(40,660),(40,680),(40,700),(40,720),(40,40),
(40,60),(40,80),(40,100),(40,120),(40,140),(40,160),(40,180),(40,200),(40,220),(40,240),(40,260),(40,280),(40,300),(40,320),
(40,340),(40,360),(40,380),(40,400),(40,420),(40,440),(40,460),(40,480),(40,500),(40,520),(40,540),(40,560),(60,40),(80,40),(100,40),
(120,40),(140,40),(160,40),(180,40),(200,40),(220,40),(460,40),(480,40),(500,40),(520,40),(560,40),(580,40),(600,40),(620,40),(640,40),(80,80),(100,80),(120,80),
(140,80),(160,80),(180,80),(200,80),(220,80),(240,80),(260,80),(280,80),(300,80),(320,80),(340,80),(360,80),(380,80),(400,80),
(420,80),(440,80),(460,80),(480,80),(500,80),(520,80),(540,80),(560,80),(580,80),(600,80),(620,80),(640,80),(80,100),(80,120),
(80,140),(80,160),(80,200),(80,220),(80,240),(80,260),(80,280),(80,300),(80,320),(80,340),(80,360),(80,380),(80,420),(80,440),
(80,460),(80,480),(80,500),(80,520),(80,540),(80,560),(80,580),(80,600),(80,620),(80,640),(80,660),(80,680),(80,700),(100,700),
(120,700),(140,700),(160,700),(180,700),(200,700),(240,700),(260,700),(300,700),(320,700),(340,700),(360,700),(380,700),(400,700),
(420,700),(440,700),(460,700),(480,700),(500,700),(520,700),(540,700),(580,700),(600,700),(620,700),(640,700),(660,700),(680,700),
(700,700),(700,120),(700,140),(700,160),(700,180),(700,200),(700,220),(700,240),(700,260),(700,280),(700,300),(700,320),(700,340),
(700,360),(700,380),(700,400),(700,420),(700,440),(700,460),(700,480),(700,500),(700,520),(700,540),(700,560),(700,580),(700,600),
(700,620),(700,640),(700,660),(700,680),(680,120),(660,120),(660,140),(660,160),(660,180),(660,200),(660,220),(660,240),(660,260),
(660,280),(660,300),(660,340),(660,360),(660,380),(660,400),(660,420),(660,440),(660,460),(660,480),(660,500),(660,520),(660,540),
(660,560),(660,580),(660,600),(660,620),(660,640),(660,660),(600,660),(620,660),(640,660),(120,660),(140,660),(160,660),(180,660),
(200,660),(220,660),(240,660),(260,660),(280,660),(300,660),(320,660),(340,660),(360,660),(380,660),(400,660),(420,660),(440,660),
(460,660),(480,660),(500,660),(520,660),(540,660),(560,660),(120,520),(120,540),(120,560),(120,580),(120,600),(120,620),(120,640),
(120,280),(120,300),(120,320),(120,340),(120,360),(120,380),(120,400),(120,420),(120,440),(120,460),(120,480),(120,120),(120,140),
(120,160),(120,180),(120,200),(120,220),(120,240),(140,120),(160,120),(180,120),(200,120),(220,120),(240,120),(260,120),(280,120),
(300,120),(320,120),(340,120),(360,120),(380,120),(420,120),(440,120),(460,120),(480,120),(500,120),(520,120),(540,120),(560,120),
(580,120),(600,120),(620,120),(620,140),(620,160),(620,180),(620,200),(620,220),(620,240),(620,260),(620,280),(620,300),(620,320),
(620,340),(620,360),(620,380),(620,400),(620,420),(620,440),(620,460),(620,480),(620,500),(620,520),(620,540),(620,580),(620,600),
(620,620),(480,620),(500,620),(520,620),(540,620),(560,620),(580,620),(600,620),(300,620),(320,620),(340,620),(360,620),(380,620),
(400,620),(420,620),(440,620),(160,620),(180,620),(200,620),(220,620),(240,620),(260,620),(160,160),(160,180),(160,200),(160,220),
(160,240),(160,260),(160,280),(160,300),(160,320),(160,340),(160,360),(160,380),(160,400),(160,420),(160,440),(160,460),(160,480),
(160,500),(160,520),(160,540),(160,560),(160,580),(160,600),(180,160),(200,160),(220,160),(240,160),(260,160),(280,160),(320,160),
(340,160),(360,160),(380,160),(400,160),(420,160),(440,160),(460,160),(480,160),(500,160),(520,160),(540,160),(560,160),(580,160),
(580,180),(580,200),(580,220),(580,240),(580,260),(580,300),(580,320),(580,340),(580,360),(580,380),(580,400),(580,420),(580,440),
(580,460),(580,500),(580,520),(580,540),(580,560),(580,580),(500,580),(520,580),(540,580),(560,580),(260,580),(280,580),(300,580),
(320,580),(340,580),(360,580),(380,580),(400,580),(420,580),(440,580),(460,580),(240,240),(240,260),(240,280),(240,300),(240,320),
(240,340),(240,360),(240,380),(240,400),(240,420),(240,440),(240,460),(240,480),(240,500),(240,520),(240,540),(260,240),(280,240),
(300,240),(320,240),(340,240),(360,240),(380,240),(400,240),(420,240),(460,240),(480,240),(500,240),(500,260),(500,280),(500,300),
(500,320),(500,340),(500,360),(500,380),(500,400),(500,420),(500,440),(500,460),(500,480),(500,500),(280,500),(300,500),(320,500),
(340,500),(360,500),(380,500),(400,500),(420,500),(440,500),(460,500),(480,500),(280,440),(280,460),(280,480),(280,500),(280,280),
(280,300),(280,320),(280,340),(280,360),(280,380),(280,400),(300,280),(320,280),(340,280),(360,280),(380,280),(400,280),(420,280),
(440,280),(460,280),(460,300),(460,320),(460,340),(460,360),(460,380),(460,400),(460,420),(460,440),(460,460),(320,460),(340,460),
(360,460),(380,460),(400,460),(420,460),(440,460),(320,320),(320,340),(320,360),(320,380),(320,400),(320,420),(320,440),(340,320),
(360,320),(380,320),(420,320),(420,340),(420,360),(420,380),(420,400),(420,420),(360,420),(380,420),(400,420),(360,360),(360,380),
(360,400),(380,360),(20,700),(640,760),(720,320),(160,720),(60,360),(400,60),(520,100),(100,220),(100,460),(420,680),(640,260),
(680,120),(640,600),(400,640),(140,300),(480,180),(220,180),(180,460),(340,600),(540,600),(560,520),(280,560),(220,360),(520,260),
(360,480),(440,360),(200,200),(200,220),(200,240),(200,260),(200,300),(200,320),(200,340),(200,360),(200,380),(200,400),(200,440),
(200,460),(200,480),(200,500),(200,520),(200,540),(200,560),(520,200),(540,200),(540,220),(540,240),(540,280),(540,300),(540,340),
(540,360),(540,400),(540,420),(540,440),(540,460),(540,480),(540,500),(540,520),(540,540),(380,540),(400,540),(420,540),(440,540),
(460,540),(480,540),(500,540),(520,540),(240,540),(260,540),(280,540),(300,540),(320,540),(340,540),( 200,580),(220,580),(220,200),
(240,200),(260,200),(280,200),(300,200),(320,200),(340,200),(360,200),(380,200),(400,200),(420,200),(440,200),(460,200),(480,200),
(500,200),(520,200),(540,260),(540,320),(540,380),(260,460)]
maze8_1_random = maze8_1
random.shuffle(maze8_1_random)

maze8_2 = [(0,760),(0,720),(0,680),(0,640),(0,600),(0,560),(0,520),(0,480),(0,440),(0,400),(0,360),(0,320),(0,280),(0,240),(0,200),
(0,160),(0,120),(0,80),(0,40),(0,0),(760,760),(760,720),(760,680),(760,640),(760,600),(760,560),(760,520),(760,480),(760,440),(760,400),
(760,360),(760,320),(760,280),(760,240),(760,200),(760,160),(760,120),(760,80),(760,40),(760,0),(760,0),(720,0),(680,0),(640,0),(600,0),
(560,0),(520,0),(480,0),(440,0),(400,0),(360,0),(320,0),(280,0),(240,0),(200,0),(160,0),(120,0),(80,0),(40,0),(0,0),(760,760),(720,760),
(680,760),(640,760),(600,760),(560,760),(520,760),(480,760),(440,760),(360,760),(320,760),(280,760),(240,760),(200,760),(160,760),
(120,760),(80,760),(40,760),(0,760)]




# DEFINE INTERFACE GRAFICA
width = 800
height = 840
size = (width, height)

playSurface = pygame.display.set_mode(size)
pygame.display.set_caption("Unicorn Mazer")
pygame.display.set_icon(uni_right)
# time.sleep(3)




# INICIALIZA E DEFINE A FONTE DE TEXTO DO JOGO
pygame.font.init()
font_padrao = pygame.font.get_default_font()
fonte50 = pygame.font.SysFont(font_padrao, 50)
fonte20 = pygame.font.SysFont(font_padrao, 20)
fonte100 = pygame.font.SysFont(font_padrao, 100)
fonte30 = pygame.font.SysFont(font_padrao, 30)
fonte70 = pygame.font.SysFont(font_padrao, 70)




# DEFINIR MALHA DA INTERFACE E VERIFICAR QUANDO BLOCOS PODEM SER USADOS
malha=[]
malha_x=[]
temp=[]
i=0
while i<=780:
    j=0
    malha_y=[]
    malha_x.append(i)
    while j<=780:
        
        temp.append(i)
        temp.append(j)
        temp=tuple(temp)
        malha.append(temp)
        temp=[]
        malha_y.append(j)
        j=j+20

    i=i+20

print('\nIniciada Malha do Aplicativo')
print('eixo X:', malha_x)
print(len(malha_x), 'blocos')
print('eixo Y:', malha_y)
print(len(malha_y), 'blocos')
# print(malha)
malha_aleatorio = malha
random.shuffle(malha_aleatorio)
# print(malha_aleatorio)


text = fonte20.render('INICIANDO SISTEMA', 1, branco)
playSurface.blit(text, (20,20))


pygame.display.update()
time.sleep(2)

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))
pygame.display.update()



# INICIA O LOOPING DE ATUALIZAÇÃO DOS FRAMES DA TELA PARA TESTAR O VIDEO
loop1=True
j=0
k=0
while loop1:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            loop1 = False
            pygame.quit()

    
    if k<50000:
        for i in malha_aleatorio:

            dot = pygame.Surface((20,20))
            dot.fill(branco)
            random_x = randrange(0,800,20)
            random_y = randrange(0,840,20)
            dot_x = random_x
            dot_y = random_y
            dot_pos = (dot_x,dot_y)
            playSurface.blit(dot,dot_pos)
            
            dot = pygame.Surface((20,20))
            dot.fill(preto)
            random_x = randrange(0,800,20)
            random_y = randrange(0,840,20)
            dot_x = random_x
            dot_y = random_y
            dot_pos = (dot_x,dot_y)
            playSurface.blit(dot,dot_pos)
            
            k=k+1

    if k>50000:
        for i in malha_aleatorio:
            dot = pygame.Surface((20,20))
            cor=random.choice(color_list)
            dot.fill(cor)
            random_x = randrange(0,800,20)
            random_y = randrange(0,840,20)
            dot_x = random_x
            dot_y = random_y
            dot_pos = (dot_x,dot_y)
            playSurface.blit(dot,dot_pos)
            j=j+1
    
    time.sleep(0.05)
    if j>50000:
        loop1 = False

    pygame.display.update()


# DEIXA A TELA ESCURA NOVAMENTE
dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))
pygame.display.update()
time.sleep(1)

# canal1.play(tema)
pygame.mixer.music.load('tema.wav')
pygame.mixer.music.play(5)
time.sleep(1)


# LOOPING DA TELA DE START

loop2=True
while loop2:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            loop2 = False
            pygame.quit()
        # print(event)
   
    playSurface.blit(start_image, (120,140))
    
    text = fonte100.render('UNICORN MAZER', 1, vermelho)
    playSurface.blit(text, (120,400))

    text = fonte50.render('Press any Key to Start', 1, branco)
    playSurface.blit(text, (200,520))

    text = fonte30.render('By Gustavo Pimenta', 1, branco)
    playSurface.blit(text, (590,700))

    pygame.display.update()

    time.sleep(1/2)

    text = fonte50.render('Press any Key to Start', 1, preto)
    playSurface.blit(text, (200,520))
    text = fonte50.render('Press any Key to Start', 1, preto)
    playSurface.blit(text, (200,520))
    text = fonte50.render('Press any Key to Start', 1, preto)
    playSurface.blit(text, (200,520))

    pygame.display.update()

    time.sleep(1/2)


    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()

        if event.type == pygame.MOUSEBUTTONDOWN:
            loop2 = False
        
        if event.type == pygame.KEYDOWN:
            loop2 = False
    

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))
pygame.display.update()
time.sleep(3)


# INICIO DO JOGO
# A PARTIR DAQUI O BICHO PEGA
score=0
score_max=999999
uni = uni_right
big_uni = big_uni_right

# PRIMEIRA FASE DO JOGO

dot = pygame.Surface((800,800))
dot.fill(preto)
dot_x = 0
dot_y = 0
dot_pos = (dot_x,dot_y)
playSurface.blit(dot,dot_pos)


# TELA DE FASE
i=0
while i<4:

    text = fonte70.render('STAGE 1:', 1, amarelo)
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    text = fonte70.render('STAGE 1:', 1, preto)
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    i=i+1


dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))
pygame.display.update()


# DEFINE AS POSIÇÕES INICIAIS 
i=0
while i==0:

    uni_x=200
    uni_y=720
    uni_pos = (uni_x,uni_y)

    # cup_x = randrange(0,800,40)
    # cup_y = randrange(0,800,40)
    cup_x = 720
    cup_y = 440
    cup_pos = (cup_x,cup_y)

    if(uni_pos != cup_pos): 
        i=1

    cof1_pos=(40,440)
    see_cof1=0
    cof2_pos=(400,160)
    see_cof2=0
    cof3_pos=(480,400)
    see_cof3=0
    


# ANIMAÇÃO DE GERAR LABIRINTO
try:
    i=0
    for m in maze1_random:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(roxo)
        dot_maze_pos = maze1_random[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)

except:
    i=0
    for m in maze1:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(roxo)
        dot_maze_pos = maze1[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)



# JAGABILIDADE DA FASE 1
fase1=True
is_moving_up = False
is_moving_down = False
is_moving_right = False
is_moving_left = False
while fase1:

    # score6 = num6dig(str(score))
    # score_text = str(score6)
    # text = fonte30.render(score_text, 1, branco)
    text = fonte30.render('SCORE: ', 1, branco)
    playSurface.blit(text, (20,815))
    text = fonte50.render(str(num6dig(score)), 1, branco)
    playSurface.blit(text, (110,805))


    caminho_livre = True
    uni_x_temp = uni_x
    uni_y_temp = uni_y
    uni_pos_temp = (uni_x_temp,uni_y_temp)

      
    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()

        # if event.type == pygame.KEYDOWN:       
        #     if event.key == pygame.K_RIGHT:                 
        #         uni_x_temp = uni_x+40     
        #     if event.key == pygame.K_DOWN:
        #         uni_y_temp = uni_y+40  
        #     if event.key == pygame.K_LEFT:
        #         uni_x_temp = uni_x-40
        #     if event.key == pygame.K_UP:
        #         uni_y_temp = uni_y-40
        
        
       
        if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
            is_moving_up = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
            is_moving_up = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
            is_moving_down = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
            is_moving_down = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            is_moving_right = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
            is_moving_right = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
            is_moving_left = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
            is_moving_left = False

    if is_moving_up==True:
        uni_y_temp = uni_y-40
    if is_moving_down==True:
        uni_y_temp = uni_y+40
    if is_moving_left==True:
        uni_x_temp = uni_x-40
        big_uni = big_uni_left
    if is_moving_right==True:
        uni_x_temp = uni_x+40
        big_uni = big_uni_right

        
    time.sleep(0.08)        
    uni_pos_temp = (uni_x_temp,uni_y_temp)

    i=0
    for m in maze1: 
        verificar = maze1[i]               
        if verificar == uni_pos_temp:
            caminho_livre=False
        i=i+1


    if caminho_livre == True:

        dot = pygame.Surface((40,40))
        dot.fill(preto)
        dot_pos = uni_pos
        playSurface.blit(dot,dot_pos)

        uni_pos = uni_pos_temp
        uni_x = uni_x_temp
        uni_y = uni_y_temp

        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)

    else:

        uni_pos = (uni_x,uni_y)
        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)


    if uni_pos == cof1_pos:
        if see_cof1==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof1 = see_cof1+1
    if see_cof1==0:
        playSurface.blit(big_cof,cof1_pos)

    if uni_pos == cof2_pos:
        if see_cof2==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof2 = see_cof2+1
    if see_cof2==0:
        playSurface.blit(big_cof,cof2_pos)

    if uni_pos == cof3_pos:
        if see_cof3==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof3 = see_cof3+1
    if see_cof3==0:
        playSurface.blit(big_cof,cof3_pos)

    
    
    pygame.display.update()

    if uni_pos == cup_pos:
        score = score + 5000
        erase_score = pygame.Surface((400,35))
        erase_score.fill(preto)
        playSurface.blit(erase_score,(0,805))
        pygame.display.update()

        fase1=False



dot = pygame.Surface((800,800))
dot.fill(preto)
dot_x = 0
dot_y = 0
dot_pos = (dot_x,dot_y)
playSurface.blit(dot,dot_pos)



# TELA DE FASE CONCLUIDA
canal2.play(win)
i=0
while i<4:
    text = fonte100.render('STAGE COMPLETED', 1, amarelo)
    playSurface.blit(text, (70,160))

    playSurface.blit(giant_cup, (180,280))

    pygame.display.update()
    time.sleep(1/3)

    text = fonte100.render('STAGE COMPLETED', 1, preto)
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))

    pygame.display.update()
    time.sleep(1/3)

    i=i+1






# SEGUNDA FASE DO JOGO


dot = pygame.Surface((800,800))
dot.fill(preto)
dot_x = 0
dot_y = 0
dot_pos = (dot_x,dot_y)
playSurface.blit(dot,dot_pos)
playSurface.blit(dot,dot_pos)
playSurface.blit(dot,dot_pos)
pygame.display.update()
time.sleep(2)




# TELA DE FASE
i=0
while i<4:

    text = fonte70.render('STAGE 2:', 1, amarelo)
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    text = fonte70.render('STAGE 2:', 1, preto)
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    i=i+1


dot = pygame.Surface((800,800))
dot.fill(preto)
dot_x = 0
dot_y = 0
dot_pos = (dot_x,dot_y)
playSurface.blit(dot,dot_pos)
pygame.display.update()


# DEFINE AS POSIÇÕES INICIAIS 
i=0
while i==0:

    uni_x = 40
    uni_y = 40
    uni_pos = (uni_x,uni_y)

    # cup_x = randrange(0,800,40)
    # cup_y = randrange(0,800,40)
    cup_x = 80
    cup_y = 720
    cup_pos = (cup_x,cup_y)

    cof1_pos=(280,120)
    cof2_pos=(520,80)
    cof3_pos=(200,560)
    see_cof1=0
    see_cof2=0
    see_cof3=0
    

    if(uni_pos != cup_pos): 
        i=1


# ANIMAÇÃO DE GERAR LABIRINTO
try:
    i=0
    for m in maze2_random:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(verde)
        dot_maze_pos = maze2_random[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)

except:
    i=0
    for m in maze2:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(verde)
        dot_maze_pos = maze2[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)



# JAGABILIDADE DA FASE 2
fase2=True
is_moving_up = False
is_moving_down = False
is_moving_right = False
is_moving_left = False
while fase2:

    text = fonte30.render('SCORE: ', 1, branco)
    playSurface.blit(text, (20,815))
    text = fonte50.render(str(num6dig(score)), 1, branco)
    playSurface.blit(text, (110,805))

    caminho_livre = True
    uni_x_temp = uni_x
    uni_y_temp = uni_y
    uni_pos_temp = (uni_x_temp,uni_y_temp)

      
    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()
       
        if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
            is_moving_up = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
            is_moving_up = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
            is_moving_down = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
            is_moving_down = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            is_moving_right = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
            is_moving_right = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
            is_moving_left = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
            is_moving_left = False

    if is_moving_up==True:
        uni_y_temp = uni_y-40
    if is_moving_down==True:
        uni_y_temp = uni_y+40
    if is_moving_left==True:
        uni_x_temp = uni_x-40
        big_uni = big_uni_left
    if is_moving_right==True:
        uni_x_temp = uni_x+40
        big_uni = big_uni_right

        
    time.sleep(0.08)        
    uni_pos_temp = (uni_x_temp,uni_y_temp)

    i=0
    for m in maze2: 
        verificar = maze2[i]               
        if verificar == uni_pos_temp:
            caminho_livre=False
        i=i+1


    if caminho_livre == True:

        dot = pygame.Surface((40,40))
        dot.fill(preto)
        dot_pos = uni_pos
        playSurface.blit(dot,dot_pos)

        uni_pos = uni_pos_temp
        uni_x = uni_x_temp
        uni_y = uni_y_temp

        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)

    else:

        uni_pos = (uni_x,uni_y)
        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)




    

    if uni_pos == cof1_pos:
        if see_cof1==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof1 = see_cof1+1
    if see_cof1==0:
        playSurface.blit(big_cof,cof1_pos)

    if uni_pos == cof2_pos:
        if see_cof2==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof2 = see_cof2+1
    if see_cof2==0:
        playSurface.blit(big_cof,cof2_pos)

    if uni_pos == cof3_pos:
        if see_cof3==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof3 = see_cof3+1
    if see_cof3==0:
        playSurface.blit(big_cof,cof3_pos)






    pygame.display.update()

    if uni_pos == cup_pos:
        score = score + 5000
        erase_score = pygame.Surface((400,35))
        erase_score.fill(preto)
        playSurface.blit(erase_score,(0,805))
        pygame.display.update()
        fase2=False



dot = pygame.Surface((800,800))
dot.fill(preto)
dot_x = 0
dot_y = 0
dot_pos = (dot_x,dot_y)
playSurface.blit(dot,dot_pos)



# TELA DE FASE CONCLUIDA
canal2.play(win)
i=0
while i<4:
    text = fonte100.render('STAGE COMPLETED', 1, amarelo)
    playSurface.blit(text, (70,160))

    playSurface.blit(giant_cup, (180,280))

    pygame.display.update()
    time.sleep(1/3)

    text = fonte100.render('STAGE COMPLETED', 1, preto)
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))

    pygame.display.update()
    time.sleep(1/3)

    i=i+1





dot = pygame.Surface((800,800))
dot.fill(preto)
dot_x = 0
dot_y = 0
dot_pos = (dot_x,dot_y)
playSurface.blit(dot,dot_pos)
playSurface.blit(dot,dot_pos)
playSurface.blit(dot,dot_pos)
pygame.display.update()
time.sleep(2)





# TERCEIRA FASE DO JOGO
i=0
while i<4:

    text = fonte70.render('STAGE 3:', 1, amarelo)
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    text = fonte70.render('STAGE 3:', 1, preto)
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    i=i+1

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))

# DEFINE AS POSIÇÕES INICIAIS 
i=0
while i==0:

    uni_x=40
    uni_y=720
    uni_pos = (uni_x,uni_y)

    cup_x = 400
    cup_y = 360
    cup_pos = (cup_x,cup_y)

    cof1_pos=(480,320)
    see_cof1=0
    cof2_pos=(240,40)
    see_cof2=0

    if(uni_pos != cup_pos): 
        i=1



# ANIMAÇÃO DE GERAR LABIRINTO
try:
    i=0
    for m in maze3_random:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(marrom)
        dot_maze_pos = maze3_random[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)

except:
    i=0
    for m in maze3:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(marrom)
        dot_maze_pos = maze3[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)



# JAGABILIDADE DA FASE 3
fase3=True
is_moving_up = False
is_moving_down = False
is_moving_right = False
is_moving_left = False
while fase3:

    text = fonte30.render('SCORE: ', 1, branco)
    playSurface.blit(text, (20,815))
    text = fonte50.render(str(num6dig(score)), 1, branco)
    playSurface.blit(text, (110,805))

    caminho_livre = True
    uni_x_temp = uni_x
    uni_y_temp = uni_y
    uni_pos_temp = (uni_x_temp,uni_y_temp)

      
    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()
       

        if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
            is_moving_up = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
            is_moving_up = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
            is_moving_down = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
            is_moving_down = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            is_moving_right = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
            is_moving_right = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
            is_moving_left = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
            is_moving_left = False

    if is_moving_up==True:
        uni_y_temp = uni_y-40
    if is_moving_down==True:
        uni_y_temp = uni_y+40
    if is_moving_left==True:
        uni_x_temp = uni_x-40
        big_uni = big_uni_left
    if is_moving_right==True:
        uni_x_temp = uni_x+40
        big_uni = big_uni_right

        
    time.sleep(0.08)        
    uni_pos_temp = (uni_x_temp,uni_y_temp)

    i=0
    for m in maze3: 
        verificar = maze3[i]               
        if verificar == uni_pos_temp:
            caminho_livre=False
        i=i+1


    if caminho_livre == True:

        dot = pygame.Surface((40,40))
        dot.fill(preto)
        dot_pos = uni_pos
        playSurface.blit(dot,dot_pos)

        uni_pos = uni_pos_temp
        uni_x = uni_x_temp
        uni_y = uni_y_temp

        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)

    else:

        uni_pos = (uni_x,uni_y)
        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)
    

    
    if uni_pos == cof1_pos:
        if see_cof1==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof1 = see_cof1+1
    if see_cof1==0:
        playSurface.blit(big_cof,cof1_pos)

    if uni_pos == cof2_pos:
        if see_cof2==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof2 = see_cof2+1
    if see_cof2==0:
        playSurface.blit(big_cof,cof2_pos)


    
    pygame.display.update()

    if uni_pos == cup_pos:
        score = score + 5000
        erase_score = pygame.Surface((400,35))
        erase_score.fill(preto)
        playSurface.blit(erase_score,(0,805))
        pygame.display.update()
        fase3=False



dot = pygame.Surface((800,800))
dot.fill(preto)
dot_x = 0
dot_y = 0
dot_pos = (dot_x,dot_y)
playSurface.blit(dot,dot_pos)
pygame.display.update()




# TELA DE FASE CONCLUIDA
canal2.play(win)
i=0
while i<4:
    text = fonte100.render('STAGE COMPLETED', 1, amarelo)
    playSurface.blit(text, (70,160))

    playSurface.blit(giant_cup, (180,280))

    pygame.display.update()
    time.sleep(1/3)

    text = fonte100.render('STAGE COMPLETED', 1, preto)
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))

    pygame.display.update()
    time.sleep(1/3)

    i=i+1







dot = pygame.Surface((800,800))
dot.fill(preto)
dot_x = 0
dot_y = 0
dot_pos = (dot_x,dot_y)
playSurface.blit(dot,dot_pos)
playSurface.blit(dot,dot_pos)
playSurface.blit(dot,dot_pos)
pygame.display.update()
time.sleep(2)






# QUARTA FASE DO JOGO
i=0
while i<4:

    text = fonte70.render('STAGE 4:', 1, amarelo)
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    text = fonte70.render('STAGE 4:', 1, preto)
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    i=i+1

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))

# DEFINE AS POSIÇÕES INICIAIS DO UNI E CUP

i=0
while i==0:

    uni_x=360
    uni_y=680
    uni_pos = (uni_x,uni_y)

    # cup_x = randrange(0,800,40)
    # cup_y = randrange(0,800,40)
    cup_x = 400
    cup_y = 120
    cup_pos = (cup_x,cup_y)

    mino1_x = 160
    mino1_y = 240
    mino1_pos = (mino1_x,mino1_y)
    mino2_x = 600
    mino2_y = 240
    mino2_pos = (mino2_x,mino2_y)
    mino_count=0

    cof1_pos=(280,120)
    cof2_pos=(480,120)
    cof3_pos=(160,200)
    cof4_pos=(600,200)
    see_cof1=0
    see_cof2=0
    see_cof3=0
    see_cof4=0

    if(uni_pos != cup_pos): 
        i=1




# ANIMAÇÃO DE GERAR LABIRINTO
try:
    i=0
    for m in maze4_random:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(azul)
        dot_maze_pos = maze4_random[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)

except:
    i=0
    for m in maze4:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(azul)
        dot_maze_pos = maze4[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)






# JAGABILIDADE DA FASE 4
fase4=True
is_moving_up = False
is_moving_down = False
is_moving_right = False
is_moving_left = False
while fase4:

    text = fonte30.render('SCORE: ', 1, branco)
    playSurface.blit(text, (20,815))
    text = fonte50.render(str(num6dig(score)), 1, branco)
    playSurface.blit(text, (110,805))

    caminho_livre = True
    uni_x_temp = uni_x
    uni_y_temp = uni_y
    uni_pos_temp = (uni_x_temp,uni_y_temp)

    caminho_mino1=True
    caminho_mino2=True
    mino1_x_temp = mino1_x
    mino1_y_temp = mino1_y
    mino2_x_temp = mino2_x
    mino2_y_temp = mino2_y

      
    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()
       

        if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
            is_moving_up = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
            is_moving_up = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
            is_moving_down = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
            is_moving_down = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            is_moving_right = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
            is_moving_right = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
            is_moving_left = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
            is_moving_left = False

    if is_moving_up==True:
        uni_y_temp = uni_y-40
    if is_moving_down==True:
        uni_y_temp = uni_y+40
    if is_moving_left==True:
        uni_x_temp = uni_x-40
        big_uni = big_uni_left
    if is_moving_right==True:
        uni_x_temp = uni_x+40
        big_uni = big_uni_right

        
    time.sleep(0.08)        
    uni_pos_temp = (uni_x_temp,uni_y_temp)



    if mino_count==7:

        mino_move1=randrange(1,5,1)
        if mino_move1==1:
            mino1_x_temp = mino1_x+40
        elif mino_move1==2:
            mino1_x_temp = mino1_x-40
        elif mino_move1==3:
            mino1_y_temp = mino1_y+40
        elif mino_move1==4:
            mino1_y_temp = mino1_y-40
        
        mino_move2=randrange(1,5,1)
        if mino_move2==1:
            mino2_x_temp = mino2_x+40
        elif mino_move2==2:
            mino2_x_temp = mino2_x-40
        elif mino_move2==3:
            mino2_y_temp = mino2_y+40
        elif mino_move2==4:
            mino2_y_temp = mino2_y-40
        
        mino1_pos_temp=(mino1_x_temp,mino1_y_temp)
        mino2_pos_temp=(mino2_x_temp,mino2_y_temp)
        i=0
        for m in maze4: 

            verificar_mino = maze4[i]               
            if verificar_mino == mino1_pos_temp:
                caminho_mino1=False
                           
            if verificar_mino == mino2_pos_temp:
                caminho_mino2=False

            i=i+1
        
        if caminho_mino1==True:
            dot = pygame.Surface((40,40))
            dot.fill(preto)
            dot_pos = mino1_pos
            playSurface.blit(dot,dot_pos)

            mino1_pos = mino1_pos_temp
            mino1_x = mino1_x_temp
            mino1_y = mino1_y_temp

        else:
            mino1_pos = (mino1_x,mino1_y)

        if caminho_mino2==True:
            dot = pygame.Surface((40,40))
            dot.fill(preto)
            dot_pos = mino2_pos
            playSurface.blit(dot,dot_pos)

            mino2_pos = mino2_pos_temp
            mino2_x = mino2_x_temp
            mino2_y = mino2_y_temp
        
        else:
            mino2_pos = (mino2_x,mino2_y)
        
       
        
        mino_count=0
    mino_count=mino_count+1
            

    i=0
    for m in maze4: 
        verificar = maze4[i]               
        if verificar == uni_pos_temp:
            caminho_livre=False
        i=i+1


    if caminho_livre == True:

        dot = pygame.Surface((40,40))
        dot.fill(preto)
        dot_pos = uni_pos
        playSurface.blit(dot,dot_pos)

        uni_pos = uni_pos_temp
        uni_x = uni_x_temp
        uni_y = uni_y_temp

        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)
        playSurface.blit(big_mino,mino1_pos)
        playSurface.blit(big_mino,mino2_pos)

    else:

        uni_pos = (uni_x,uni_y)
        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)
        playSurface.blit(big_mino,mino1_pos)
        playSurface.blit(big_mino,mino2_pos)
    

    if uni_pos == cof1_pos:
        if see_cof1==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof1 = see_cof1+1
    if see_cof1==0:
        playSurface.blit(big_cof,cof1_pos)

    if uni_pos == cof2_pos:
        if see_cof2==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof2 = see_cof2+1
    if see_cof2==0:
        playSurface.blit(big_cof,cof2_pos)

    if uni_pos == cof3_pos:
        if see_cof3==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof3 = see_cof3+1
    if see_cof3==0:
        playSurface.blit(big_cof,cof3_pos)
   
    if uni_pos == cof4_pos:
        if see_cof4==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof4 = see_cof4+1
    if see_cof4==0:
        playSurface.blit(big_cof,cof4_pos)


    
    pygame.display.update()

    if uni_pos == cup_pos:  
        score = score + 5000
        erase_score = pygame.Surface((400,35))
        erase_score.fill(preto)
        playSurface.blit(erase_score,(0,805))
        pygame.display.update()
        fase4=False


    # TELA DE GAME OVER
    elif uni_pos == mino1_pos or uni_pos == mino2_pos:
        
        canal2.play(lose)
        w=11
        dead_screen = True

        dot = pygame.Surface((800,800))
        dot.fill(preto)
        playSurface.blit(dot,(0,0))

        while dead_screen:

            text = fonte100.render('GAME OVER', 1, vermelho)
            playSurface.blit(text, (190,170))
            playSurface.blit(dead, (290,360))

            text = fonte50.render('Press Any Key To Try Again', 1, vermelho)
            playSurface.blit(text, (180,700))
            dot = pygame.Surface((100,100))
            dot.fill(preto)
            playSurface.blit(dot,(389,749))
            text = fonte50.render(str(w), 1, vermelho)
            playSurface.blit(text, (390,750))
            pygame.display.update()
            w=w-1
            time.sleep(1)

            text = fonte50.render('Press Any Key To Try Again', 1, preto)
            playSurface.blit(text, (180,700))
            playSurface.blit(text, (180,700))
            playSurface.blit(text, (180,700))
            dot = pygame.Surface((100,100))
            dot.fill(preto)
            playSurface.blit(dot,(389,749))
            text = fonte50.render(str(w), 1, vermelho)
            playSurface.blit(text, (390,750))
            pygame.display.update()
            w=w-1
            time.sleep(1)

            if w<=0:
                pygame.quit()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                if event.type == pygame.MOUSEBUTTONDOWN or event.type == pygame.KEYDOWN:

                    score=score-10000
                    if score < 0:
                        score=0
                    erase_score = pygame.Surface((400,35))
                    erase_score.fill(preto)
                    playSurface.blit(erase_score,(0,805))                
                    uni_x=360
                    uni_y=680
                    uni_pos = (uni_x,uni_y)
                    caminho_livre = True
                    # uni_x_temp = uni_x
                    # uni_y_temp = uni_y
                    # uni_pos_temp = (uni_x_temp,uni_y_temp)                
                    cup_x = 400
                    cup_y = 120
                    cup_pos = (cup_x,cup_y)
                    mino1_x = 160
                    mino1_y = 240
                    mino1_pos = (mino1_x,mino1_y)
                    mino2_x = 600
                    mino2_y = 240
                    mino2_pos = (mino2_x,mino2_y)
                    mino_count=0  
                    dot = pygame.Surface((800,800))
                    dot.fill(preto)
                    playSurface.blit(dot,(0,0))
                    try:
                        i=0
                        for m in maze4_random:
                            canal2.play(build_sound)
                            dot_maze = pygame.Surface((40,40))
                            dot_maze.fill(azul)
                            dot_maze_pos = maze4_random[i]
                            playSurface.blit(dot_maze,dot_maze_pos)
                            i=i+1
                            pygame.display.update()
                            time.sleep(0.008)
                    except:
                        i=0
                        for m in maze4:
                            canal2.play(build_sound)
                            dot_maze = pygame.Surface((40,40))
                            dot_maze.fill(azul)
                            dot_maze_pos = maze4[i]
                            playSurface.blit(dot_maze,dot_maze_pos)
                            i=i+1
                            pygame.display.update()

                            time.sleep(0.008)
                    fase4=True
                    is_moving_up = False
                    is_moving_down = False
                    is_moving_right = False
                    is_moving_left = False
                    dead_screen = False




# TELA DE FASE CONCLUIDA
dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))
pygame.display.update()

canal2.play(win)
i=0
while i<4:
    text = fonte100.render('STAGE COMPLETED', 1, amarelo)
    playSurface.blit(text, (70,160))

    playSurface.blit(giant_cup, (180,280))

    pygame.display.update()
    time.sleep(1/3)

    text = fonte100.render('STAGE COMPLETED', 1, preto)
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))

    pygame.display.update()
    time.sleep(1/3)

    i=i+1

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))





# QUINTA FASE DO JOGO
i=0
while i<4:

    text = fonte70.render('STAGE 5:', 1, amarelo)
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    text = fonte70.render('STAGE 5:', 1, preto)
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    i=i+1

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))


# DEFINE AS POSIÇÕES INICIAIS

i=0
while i==0:

    uni_x=400
    uni_y=400
    uni_pos = (uni_x,uni_y)

    # cup_x = 400
    # cup_y = 120
    # cup_pos = (cup_x,cup_y)

    mino1_x = 40
    mino1_y = 40
    mino1_pos = (mino1_x,mino1_y)
    mino2_x = 720
    mino2_y = 40
    mino2_pos = (mino2_x,mino2_y)
    mino3_x = 40
    mino3_y = 720
    mino3_pos = (mino3_x,mino3_y)
    mino4_x = 720
    mino4_y = 720
    mino4_pos = (mino4_x,mino4_y)
    mino_count=0

    cof1_pos=(200,40)
    cof2_pos=(440,40)
    cof3_pos=(560,120)
    cof4_pos=(160,320)
    cof5_pos=(360,520)
    cof6_pos=(160,640)
    cof7_pos=(640,680)
    see_cof1=0
    see_cof2=0
    see_cof3=0
    see_cof4=0
    see_cof5=0
    see_cof6=0
    see_cof7=0
    

    if(uni_pos != cup_pos): 
        i=1




# ANIMAÇÃO DE GERAR LABIRINTO
try:
    i=0
    for m in maze5_random:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(laranja)
        dot_maze_pos = maze5_random[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)

except:
    i=0
    for m in maze5:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(laranja)
        dot_maze_pos = maze5[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)





# JAGABILIDADE DA FASE 5
fase5=True
fase5_count=0
is_moving_up = False
is_moving_down = False
is_moving_right = False
is_moving_left = False
while fase5:

    text = fonte30.render('SCORE: ', 1, branco)
    playSurface.blit(text, (20,815))
    text = fonte50.render(str(num6dig(score)), 1, branco)
    playSurface.blit(text, (110,805))

    caminho_livre = True
    uni_x_temp = uni_x
    uni_y_temp = uni_y
    uni_pos_temp = (uni_x_temp,uni_y_temp)

    caminho_mino1=True
    caminho_mino2=True
    caminho_mino3=True
    caminho_mino4=True
    mino1_x_temp = mino1_x
    mino1_y_temp = mino1_y
    mino2_x_temp = mino2_x
    mino2_y_temp = mino2_y
    mino3_x_temp = mino3_x
    mino3_y_temp = mino3_y
    mino4_x_temp = mino4_x
    mino4_y_temp = mino4_y

      
    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()
       

        if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
            is_moving_up = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
            is_moving_up = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
            is_moving_down = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
            is_moving_down = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            is_moving_right = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
            is_moving_right = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
            is_moving_left = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
            is_moving_left = False

    if is_moving_up==True:
        uni_y_temp = uni_y-40
    if is_moving_down==True:
        uni_y_temp = uni_y+40
    if is_moving_left==True:
        uni_x_temp = uni_x-40
        big_uni = big_uni_left
    if is_moving_right==True:
        uni_x_temp = uni_x+40
        big_uni = big_uni_right

        
    time.sleep(0.08)        
    uni_pos_temp = (uni_x_temp,uni_y_temp)



    if mino_count==7:

        mino_move1=randrange(1,5,1)
        if mino_move1==1:
            mino1_x_temp = mino1_x+40
        elif mino_move1==2:
            mino1_x_temp = mino1_x-40
        elif mino_move1==3:
            mino1_y_temp = mino1_y+40
        elif mino_move1==4:
            mino1_y_temp = mino1_y-40
        
        mino_move2=randrange(1,5,1)
        if mino_move2==1:
            mino2_x_temp = mino2_x+40
        elif mino_move2==2:
            mino2_x_temp = mino2_x-40
        elif mino_move2==3:
            mino2_y_temp = mino2_y+40
        elif mino_move2==4:
            mino2_y_temp = mino2_y-40

        mino_move3=randrange(1,5,1)
        if mino_move3==1:
            mino3_x_temp = mino3_x+40
        elif mino_move3==2:
            mino3_x_temp = mino3_x-40
        elif mino_move3==3:
            mino3_y_temp = mino3_y+40
        elif mino_move3==4:
            mino3_y_temp = mino3_y-40
        
        mino_move4=randrange(1,5,1)
        if mino_move4==1:
            mino4_x_temp = mino4_x+40
        elif mino_move4==2:
            mino4_x_temp = mino4_x-40
        elif mino_move4==3:
            mino4_y_temp = mino4_y+40
        elif mino_move4==4:
            mino4_y_temp = mino4_y-40
        
        mino1_pos_temp=(mino1_x_temp,mino1_y_temp)
        mino2_pos_temp=(mino2_x_temp,mino2_y_temp)
        mino3_pos_temp=(mino3_x_temp,mino3_y_temp)
        mino4_pos_temp=(mino4_x_temp,mino4_y_temp)
        i=0
        for m in maze5: 

            verificar_mino = maze5[i]               
            if verificar_mino == mino1_pos_temp:
                caminho_mino1=False
                           
            if verificar_mino == mino2_pos_temp:
                caminho_mino2=False

            if verificar_mino == mino3_pos_temp:
                caminho_mino3=False
                           
            if verificar_mino == mino4_pos_temp:
                caminho_mino4=False

            i=i+1
        
        if caminho_mino1==True:
            dot = pygame.Surface((40,40))
            dot.fill(preto)
            dot_pos = mino1_pos
            playSurface.blit(dot,dot_pos)

            mino1_pos = mino1_pos_temp
            mino1_x = mino1_x_temp
            mino1_y = mino1_y_temp

        else:
            mino1_pos = (mino1_x,mino1_y)

        if caminho_mino2==True:
            dot = pygame.Surface((40,40))
            dot.fill(preto)
            dot_pos = mino2_pos
            playSurface.blit(dot,dot_pos)

            mino2_pos = mino2_pos_temp
            mino2_x = mino2_x_temp
            mino2_y = mino2_y_temp
        
        else:
            mino2_pos = (mino2_x,mino2_y)

        if caminho_mino3==True:
            dot = pygame.Surface((40,40))
            dot.fill(preto)
            dot_pos = mino3_pos
            playSurface.blit(dot,dot_pos)

            mino3_pos = mino3_pos_temp
            mino3_x = mino3_x_temp
            mino3_y = mino3_y_temp

        else:
            mino3_pos = (mino3_x,mino3_y)

        if caminho_mino4==True:
            dot = pygame.Surface((40,40))
            dot.fill(preto)
            dot_pos = mino4_pos
            playSurface.blit(dot,dot_pos)

            mino4_pos = mino4_pos_temp
            mino4_x = mino4_x_temp
            mino4_y = mino4_y_temp
        
        else:
            mino4_pos = (mino4_x,mino4_y)
        
       
        
        mino_count=0
    mino_count=mino_count+1
            

    i=0
    for m in maze5: 
        verificar = maze5[i]               
        if verificar == uni_pos_temp:
            caminho_livre=False
        i=i+1


    if caminho_livre == True:

        dot = pygame.Surface((40,40))
        dot.fill(preto)
        dot_pos = uni_pos
        playSurface.blit(dot,dot_pos)

        uni_pos = uni_pos_temp
        uni_x = uni_x_temp
        uni_y = uni_y_temp

        playSurface.blit(big_uni,uni_pos)
        # playSurface.blit(big_cup,cup_pos)
        playSurface.blit(big_mino,mino1_pos)
        playSurface.blit(big_mino,mino2_pos)
        playSurface.blit(big_mino,mino3_pos)
        playSurface.blit(big_mino,mino4_pos)

    else:

        uni_pos = (uni_x,uni_y)
        playSurface.blit(big_uni,uni_pos)
        # playSurface.blit(big_cup,cup_pos)
        playSurface.blit(big_mino,mino1_pos)
        playSurface.blit(big_mino,mino2_pos)
        playSurface.blit(big_mino,mino3_pos)
        playSurface.blit(big_mino,mino4_pos)
    

    if uni_pos == cof1_pos:
        if see_cof1==0:
            canal2.play(cof_sound)
            fase5_count = fase5_count+1
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof1 = see_cof1+1
    if see_cof1==0:
        playSurface.blit(big_cof,cof1_pos)

    if uni_pos == cof2_pos:
        if see_cof2==0:
            canal2.play(cof_sound)
            fase5_count = fase5_count+1
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof2 = see_cof2+1
    if see_cof2==0:
        playSurface.blit(big_cof,cof2_pos)

    if uni_pos == cof3_pos:
        if see_cof3==0:
            canal2.play(cof_sound)
            fase5_count = fase5_count+1
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof3 = see_cof3+1
    if see_cof3==0:
        playSurface.blit(big_cof,cof3_pos)
   
    if uni_pos == cof4_pos:
        if see_cof4==0:
            canal2.play(cof_sound)
            fase5_count = fase5_count+1
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof4 = see_cof4+1
    if see_cof4==0:
        playSurface.blit(big_cof,cof4_pos)
   
    if uni_pos == cof5_pos:
        if see_cof5==0:
            canal2.play(cof_sound)
            fase5_count = fase5_count+1
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof5 = see_cof5+1
    if see_cof5==0:
        playSurface.blit(big_cof,cof5_pos)

    if uni_pos == cof6_pos:
        if see_cof6==0:
            canal2.play(cof_sound)
            fase5_count = fase5_count+1
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof6 = see_cof6+1
    if see_cof6==0:
        playSurface.blit(big_cof,cof6_pos)
    
    if uni_pos == cof7_pos:
        if see_cof7==0:
            canal2.play(cof_sound)
            fase5_count = fase5_count+1
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof7 = see_cof7+1
    if see_cof7==0:
        playSurface.blit(big_cof,cof7_pos)


    
    pygame.display.update()

    if fase5_count>=7:  
        score = score + 5000
        erase_score = pygame.Surface((400,35))
        erase_score.fill(preto)
        playSurface.blit(erase_score,(0,805))
        pygame.display.update()
        fase5=False


    # TELA DE GAME OVER
    elif uni_pos == mino1_pos or uni_pos == mino2_pos or uni_pos == mino3_pos or uni_pos == mino4_pos:
        
        canal2.play(lose)
        w=11
        dead_screen = True

        dot = pygame.Surface((800,800))
        dot.fill(preto)
        playSurface.blit(dot,(0,0))

        while dead_screen:

            text = fonte100.render('GAME OVER', 1, vermelho)
            playSurface.blit(text, (190,170))
            playSurface.blit(dead, (290,360))

            text = fonte50.render('Press Any Key To Try Again', 1, vermelho)
            playSurface.blit(text, (180,700))
            dot = pygame.Surface((100,100))
            dot.fill(preto)
            playSurface.blit(dot,(389,749))
            text = fonte50.render(str(w), 1, vermelho)
            playSurface.blit(text, (390,750))
            pygame.display.update()
            w=w-1
            time.sleep(1)

            text = fonte50.render('Press Any Key To Try Again', 1, preto)
            playSurface.blit(text, (180,700))
            playSurface.blit(text, (180,700))
            playSurface.blit(text, (180,700))
            dot = pygame.Surface((100,100))
            dot.fill(preto)
            playSurface.blit(dot,(389,749))
            text = fonte50.render(str(w), 1, vermelho)
            playSurface.blit(text, (390,750))
            pygame.display.update()
            w=w-1
            time.sleep(1)

            if w<=0:
                pygame.quit()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                if event.type == pygame.MOUSEBUTTONDOWN or event.type == pygame.KEYDOWN:

                    score=score-10000
                    if score < 0:
                        score=0
                    erase_score = pygame.Surface((400,35))
                    erase_score.fill(preto)
                    playSurface.blit(erase_score,(0,805))                
                    uni_x=400
                    uni_y=400
                    uni_pos = (uni_x,uni_y)
                    uni_x_temp = uni_x
                    uni_y_temp = uni_y
                    uni_pos_temp = (uni_x_temp,uni_y_temp)                
                    mino1_x = 40
                    mino1_y = 40
                    mino1_pos = (mino1_x,mino1_y)
                    mino2_x = 720
                    mino2_y = 40
                    mino2_pos = (mino2_x,mino2_y)
                    mino3_x = 40
                    mino3_y = 720
                    mino3_pos = (mino3_x,mino3_y)
                    mino4_x = 720
                    mino4_y = 720
                    mino4_pos = (mino4_x,mino4_y)
                    mino_count=0  
                    dot = pygame.Surface((800,800))
                    dot.fill(preto)
                    playSurface.blit(dot,(0,0))
                    try:
                        i=0
                        for m in maze5_random:
                            canal2.play(build_sound)
                            dot_maze = pygame.Surface((40,40))
                            dot_maze.fill(laranja)
                            dot_maze_pos = maze5_random[i]
                            playSurface.blit(dot_maze,dot_maze_pos)
                            i=i+1
                            pygame.display.update()
                            time.sleep(0.008)
                    except:
                        i=0
                        for m in maze5:
                            canal2.play(build_sound)
                            dot_maze = pygame.Surface((40,40))
                            dot_maze.fill(laranja)
                            dot_maze_pos = maze5[i]
                            playSurface.blit(dot_maze,dot_maze_pos)
                            i=i+1
                            pygame.display.update()
                            time.sleep(0.008)

                    fase5=True
                    is_moving_up = False
                    is_moving_down = False
                    is_moving_right = False
                    is_moving_left = False
                    dead_screen = False







# TELA DE FASE CONCLUIDA
dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))
pygame.display.update()


canal2.play(win)
i=0
while i<4:
    text = fonte100.render('STAGE COMPLETED', 1, amarelo)
    playSurface.blit(text, (70,160))

    playSurface.blit(giant_cup, (180,280))

    pygame.display.update()
    time.sleep(1/3)

    text = fonte100.render('STAGE COMPLETED', 1, preto)
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))

    pygame.display.update()
    time.sleep(1/3)

    i=i+1





dot = pygame.Surface((800,800))
dot.fill(preto)
playSurface.blit(dot,(0,0))
playSurface.blit(dot,(0,0))
playSurface.blit(dot,(0,0))
pygame.display.update()
time.sleep(2)






# SEXTA FASE DO JOGO
i=0
while i<4:

    text = fonte70.render('STAGE 6:', 1, amarelo)
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    text = fonte70.render('STAGE 6:', 1, preto)
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    i=i+1

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))

# DEFINE AS POSIÇÕES INICIAIS 
# i=0
# while i==0:

uni_x=40
uni_y=360
uni_pos = (uni_x,uni_y)

    # cup_x = randrange(0,800,40)
    # cup_y = randrange(0,800,40)
cup_x = 80
cup_y = 280
cup_pos = (cup_x,cup_y)

mino1_x = 440
mino1_y = 480
mino1_pos = (mino1_x,mino1_y)
mino2_x = 120
mino2_y = 600
mino2_pos = (mino2_x,mino2_y)
mino3_x = 560
mino3_y = 640
mino3_pos = (mino3_x,mino3_y)
mino_count=0

cof1_pos=(680,40)
cof2_pos=(400,200)
cof3_pos=(160,240)
cof4_pos=(80,440)
cof5_pos=(720,720)
see_cof1=0
see_cof2=0
see_cof3=0
see_cof4=0
see_cof5=0
see_cof6=0
see_cof7=0

    # if(uni_pos != cup_pos): 
    #     i=1




# ANIMAÇÃO DE GERAR LABIRINTO
try:
    i=0
    for m in maze6_1_random:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(azul_claro)
        dot_maze_pos = maze6_1_random[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)

except:
    i=0
    for m in maze6_1:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((40,40))
        dot_maze.fill(azul_claro)
        dot_maze_pos = maze6_1[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.008)






# JAGABILIDADE DA FASE 6
fase6_1=True
fase6_2=False
is_moving_up = False
is_moving_down = False
is_moving_right = False
is_moving_left = False
while fase6_1:

    text = fonte30.render('SCORE: ', 1, branco)
    playSurface.blit(text, (20,815))
    text = fonte50.render(str(num6dig(score)), 1, branco)
    playSurface.blit(text, (110,805))

    caminho_livre = True
    uni_x_temp = uni_x
    uni_y_temp = uni_y
    uni_pos_temp = (uni_x_temp,uni_y_temp)

    caminho_mino1=True
    caminho_mino2=True
    caminho_mino3=True
    mino1_x_temp = mino1_x
    mino1_y_temp = mino1_y
    mino2_x_temp = mino2_x
    mino2_y_temp = mino2_y
    mino3_x_temp = mino3_x
    mino3_y_temp = mino3_y

      
    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()
       

        if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
            is_moving_up = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
            is_moving_up = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
            is_moving_down = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
            is_moving_down = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            is_moving_right = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
            is_moving_right = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
            is_moving_left = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
            is_moving_left = False

    if is_moving_up==True:
        uni_y_temp = uni_y-40
    if is_moving_down==True:
        uni_y_temp = uni_y+40
    if is_moving_left==True:
        uni_x_temp = uni_x-40
        big_uni = big_uni_left
    if is_moving_right==True:
        uni_x_temp = uni_x+40
        big_uni = big_uni_right

        
    time.sleep(0.08)        
    uni_pos_temp = (uni_x_temp,uni_y_temp)



    if mino_count==7:

        mino_move1=randrange(1,5,1)
        if mino_move1==1:
            mino1_x_temp = mino1_x+40
        elif mino_move1==2:
            mino1_x_temp = mino1_x-40
        elif mino_move1==3:
            mino1_y_temp = mino1_y+40
        elif mino_move1==4:
            mino1_y_temp = mino1_y-40
        
        mino_move2=randrange(1,5,1)
        if mino_move2==1:
            mino2_x_temp = mino2_x+40
        elif mino_move2==2:
            mino2_x_temp = mino2_x-40
        elif mino_move2==3:
            mino2_y_temp = mino2_y+40
        elif mino_move2==4:
            mino2_y_temp = mino2_y-40

        mino_move3=randrange(1,5,1)
        if mino_move3==1:
            mino3_x_temp = mino3_x+40
        elif mino_move3==2:
            mino3_x_temp = mino3_x-40
        elif mino_move3==3:
            mino3_y_temp = mino3_y+40
        elif mino_move3==4:
            mino3_y_temp = mino3_y-40
        
        mino1_pos_temp=(mino1_x_temp,mino1_y_temp)
        mino2_pos_temp=(mino2_x_temp,mino2_y_temp)
        mino3_pos_temp=(mino3_x_temp,mino3_y_temp)
        i=0
        for m in maze6_1: 

            verificar_mino = maze6_1[i]               
            if verificar_mino == mino1_pos_temp:
                caminho_mino1=False
                           
            if verificar_mino == mino2_pos_temp:
                caminho_mino2=False

            if verificar_mino == mino3_pos_temp:
                caminho_mino3=False

            i=i+1
        
        if caminho_mino1==True:
            dot = pygame.Surface((40,40))
            dot.fill(preto)
            dot_pos = mino1_pos
            playSurface.blit(dot,dot_pos)

            mino1_pos = mino1_pos_temp
            mino1_x = mino1_x_temp
            mino1_y = mino1_y_temp

        else:
            mino1_pos = (mino1_x,mino1_y)

        if caminho_mino2==True:
            dot = pygame.Surface((40,40))
            dot.fill(preto)
            dot_pos = mino2_pos
            playSurface.blit(dot,dot_pos)

            mino2_pos = mino2_pos_temp
            mino2_x = mino2_x_temp
            mino2_y = mino2_y_temp
        
        else:
            mino2_pos = (mino2_x,mino2_y)
        
        if caminho_mino3==True:
            dot = pygame.Surface((40,40))
            dot.fill(preto)
            dot_pos = mino3_pos
            playSurface.blit(dot,dot_pos)

            mino3_pos = mino3_pos_temp
            mino3_x = mino3_x_temp
            mino3_y = mino3_y_temp
        
        else:
            mino3_pos = (mino3_x,mino3_y)
       
        
        mino_count=0
    mino_count=mino_count+1
            

    i=0
    for m in maze6_1: 
        verificar = maze6_1[i]               
        if verificar == uni_pos_temp:
            caminho_livre=False
        i=i+1


    if caminho_livre == True:

        dot = pygame.Surface((40,40))
        dot.fill(preto)
        dot_pos = uni_pos
        playSurface.blit(dot,dot_pos)

        uni_pos = uni_pos_temp
        uni_x = uni_x_temp
        uni_y = uni_y_temp

        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)
        playSurface.blit(big_mino,mino1_pos)
        playSurface.blit(big_mino,mino2_pos)
        playSurface.blit(big_mino,mino3_pos)

    else:

        uni_pos = (uni_x,uni_y)
        playSurface.blit(big_uni,uni_pos)
        playSurface.blit(big_cup,cup_pos)
        playSurface.blit(big_mino,mino1_pos)
        playSurface.blit(big_mino,mino2_pos)
        playSurface.blit(big_mino,mino3_pos)
    

    if uni_pos == cof1_pos:
        if see_cof1==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof1 = see_cof1+1
    if see_cof1==0:
        playSurface.blit(big_cof,cof1_pos)

    if uni_pos == cof2_pos:
        if see_cof2==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof2 = see_cof2+1
    if see_cof2==0:
        playSurface.blit(big_cof,cof2_pos)

    if uni_pos == cof3_pos:
        if see_cof3==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof3 = see_cof3+1
    if see_cof3==0:
        playSurface.blit(big_cof,cof3_pos)
   
    if uni_pos == cof4_pos:
        if see_cof4==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof4 = see_cof4+1
    if see_cof4==0:
        playSurface.blit(big_cof,cof4_pos)

    if uni_pos == cof5_pos:
        if see_cof5==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof5 = see_cof5+1
    if see_cof5==0:
        playSurface.blit(big_cof,cof5_pos)

    
    pygame.display.update()



    # FASE 6_2:
    if uni_pos==(760,440)or uni_pos==(760,320)or uni_pos==(800,440)or uni_pos==(800,320):
        
        dot = pygame.Surface((800,840))
        dot.fill(preto)
        playSurface.blit(dot,(0,0))
        playSurface.blit(dot,(0,0))
        playSurface.blit(dot,(0,0))

        i=0
        for m in maze6_2:
            dot_maze = pygame.Surface((40,40))
            dot_maze.fill(azul_claro)
            dot_maze_pos = maze6_2[i]
            playSurface.blit(dot_maze,dot_maze_pos)
            i=i+1
        pygame.display.update()


        if uni_pos==(760,440)or uni_pos==(800,440):
            uni_x=40
            uni_y=440
            uni_pos=(uni_x,uni_y)
            cof6_pos=(720,440)
            cof7_pos=(40,720)
            mino_count=0
            mino1_x = 640
            mino1_y = 320
            mino1_pos = (mino1_x,mino1_y)
            mino2_x = 640
            mino2_y = 720
            mino2_pos = (mino2_x,mino2_y)
            

        if uni_pos==(760,320)or uni_pos==(800,320):
            uni_x=40
            uni_y=320
            uni_pos=(uni_x,uni_y)
            cof6_pos=(720,440)
            cof7_pos=(40,720)
            mino_count=0
            mino1_x = 640
            mino1_y = 320
            mino1_pos = (mino1_x,mino1_y)
            mino2_x = 640
            mino2_y = 720
            mino2_pos = (mino2_x,mino2_y)
        
        fase6_2=True
        is_moving_up = False
        is_moving_down = False
        is_moving_right = False
        is_moving_left = False

        while fase6_2:




            text = fonte30.render('SCORE: ', 1, branco)
            playSurface.blit(text, (20,815))
            text = fonte50.render(str(num6dig(score)), 1, branco)
            playSurface.blit(text, (110,805))

            caminho_livre = True
            uni_x_temp = uni_x
            uni_y_temp = uni_y
            uni_pos_temp = (uni_x_temp,uni_y_temp)


            caminho_mino1=True
            caminho_mino2=True
            mino1_x_temp = mino1_x
            mino1_y_temp = mino1_y
            mino2_x_temp = mino2_x
            mino2_y_temp = mino2_y


            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    pygame.quit()
            

                if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
                    is_moving_up = True
                elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
                    is_moving_up = False

                if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
                    is_moving_down = True
                elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
                    is_moving_down = False

                if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
                    is_moving_right = True
                elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
                    is_moving_right = False

                if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
                    is_moving_left = True
                elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
                    is_moving_left = False

            if is_moving_up==True:
                uni_y_temp = uni_y-40
            if is_moving_down==True:
                uni_y_temp = uni_y+40
            if is_moving_left==True:
                uni_x_temp = uni_x-40
                big_uni = big_uni_left
            if is_moving_right==True:
                uni_x_temp = uni_x+40
                big_uni = big_uni_right

                
            time.sleep(0.08)        
            uni_pos_temp = (uni_x_temp,uni_y_temp)


            
            if mino_count==7:

                mino_move1=randrange(1,5,1)
                if mino_move1==1:
                    mino1_x_temp = mino1_x+40
                elif mino_move1==2:
                    mino1_x_temp = mino1_x-40
                elif mino_move1==3:
                    mino1_y_temp = mino1_y+40
                elif mino_move1==4:
                    mino1_y_temp = mino1_y-40
                
                mino_move2=randrange(1,5,1)
                if mino_move2==1:
                    mino2_x_temp = mino2_x+40
                elif mino_move2==2:
                    mino2_x_temp = mino2_x-40
                elif mino_move2==3:
                    mino2_y_temp = mino2_y+40
                elif mino_move2==4:
                    mino2_y_temp = mino2_y-40

                
                mino1_pos_temp=(mino1_x_temp,mino1_y_temp)
                mino2_pos_temp=(mino2_x_temp,mino2_y_temp)

                i=0
                for m in maze6_2: 

                    verificar_mino = maze6_2[i]               
                    if verificar_mino == mino1_pos_temp:
                        caminho_mino1=False
                                
                    if verificar_mino == mino2_pos_temp:
                        caminho_mino2=False

                    i=i+1
                
                if caminho_mino1==True:
                    dot = pygame.Surface((40,40))
                    dot.fill(preto)
                    dot_pos = mino1_pos
                    playSurface.blit(dot,dot_pos)

                    mino1_pos = mino1_pos_temp
                    mino1_x = mino1_x_temp
                    mino1_y = mino1_y_temp

                else:
                    mino1_pos = (mino1_x,mino1_y)

                if caminho_mino2==True:
                    dot = pygame.Surface((40,40))
                    dot.fill(preto)
                    dot_pos = mino2_pos
                    playSurface.blit(dot,dot_pos)

                    mino2_pos = mino2_pos_temp
                    mino2_x = mino2_x_temp
                    mino2_y = mino2_y_temp
                
                else:
                    mino2_pos = (mino2_x,mino2_y)
    
                
                mino_count=0
            mino_count=mino_count+1
            


            i=0
            for m in maze6_2: 
                verificar = maze6_2[i]               
                if verificar == uni_pos_temp:
                    caminho_livre=False
                i=i+1


            if caminho_livre == True:

                dot = pygame.Surface((40,40))
                dot.fill(preto)
                dot_pos = uni_pos
                playSurface.blit(dot,dot_pos)

                uni_pos = uni_pos_temp
                uni_x = uni_x_temp
                uni_y = uni_y_temp

                playSurface.blit(big_uni,uni_pos)
                playSurface.blit(big_mino,mino1_pos)
                playSurface.blit(big_mino,mino2_pos)

            else:

                uni_pos = (uni_x,uni_y)
                playSurface.blit(big_uni,uni_pos)
                playSurface.blit(big_mino,mino1_pos)
                playSurface.blit(big_mino,mino2_pos)
                               

            if uni_pos == cof6_pos:
                if see_cof6==0:
                    canal2.play(cof_sound)
                    score = score + 1000
                    erase_score = pygame.Surface((400,35))
                    erase_score.fill(preto)
                    playSurface.blit(erase_score,(0,805))
                    pygame.display.update()
                see_cof6 = see_cof6+1
            if see_cof6==0:
                playSurface.blit(big_cof,cof6_pos)

            if uni_pos == cof7_pos:
                if see_cof7==0:
                    canal2.play(cof_sound)
                    score = score + 1000
                    erase_score = pygame.Surface((400,35))
                    erase_score.fill(preto)
                    playSurface.blit(erase_score,(0,805))
                    pygame.display.update()
                see_cof7 = see_cof7+1
            if see_cof7==0:
                playSurface.blit(big_cof,cof7_pos)


            pygame.display.update()


            if uni_pos==(0,440)or uni_pos==(-40,440): 
                uni_x=720
                uni_y=440
                uni_pos=(uni_x,uni_y)
                mino1_x = 440
                mino1_y = 480
                mino1_pos = (mino1_x,mino1_y)
                mino2_x = 120
                mino2_y = 600
                mino2_pos = (mino2_x,mino2_y)
                mino3_x = 560
                mino3_y = 640
                mino3_pos = (mino3_x,mino3_y)
                mino_count=0
                fase6_2=False
                dot = pygame.Surface((800,840))
                dot.fill(preto)
                playSurface.blit(dot,(0,0))
                playSurface.blit(dot,(0,0))
                playSurface.blit(dot,(0,0))
                i=0
                for m in maze6_1:
                    dot_maze = pygame.Surface((40,40))
                    dot_maze.fill(azul_claro)
                    dot_maze_pos = maze6_1[i]
                    playSurface.blit(dot_maze,dot_maze_pos)
                    i=i+1
                pygame.display.update()
                
            
            if uni_pos==(0,320)or uni_pos==(-40,320): 
                uni_x=720
                uni_y=320
                uni_pos=(uni_x,uni_y)
                mino1_x = 440
                mino1_y = 480
                mino1_pos = (mino1_x,mino1_y)
                mino2_x = 120
                mino2_y = 600
                mino2_pos = (mino2_x,mino2_y)
                mino3_x = 560
                mino3_y = 640
                mino3_pos = (mino3_x,mino3_y)
                mino_count=0
                fase6_2=False
                dot = pygame.Surface((800,840))
                dot.fill(preto)
                playSurface.blit(dot,(0,0))
                playSurface.blit(dot,(0,0))
                playSurface.blit(dot,(0,0))
                i=0
                for m in maze6_1:
                    dot_maze = pygame.Surface((40,40))
                    dot_maze.fill(azul_claro)
                    dot_maze_pos = maze6_1[i]
                    playSurface.blit(dot_maze,dot_maze_pos)
                    i=i+1
                pygame.display.update()

            if uni_pos == mino1_pos or uni_pos == mino2_pos:
        
                canal2.play(lose)
                w=11
                dead_screen = True
                fase6_2=False

                dot = pygame.Surface((800,800))
                dot.fill(preto)
                playSurface.blit(dot,(0,0))








    if uni_pos == cup_pos:  
        score = score + 5000
        erase_score = pygame.Surface((400,35))
        erase_score.fill(preto)
        playSurface.blit(erase_score,(0,805))
        pygame.display.update()
        fase6_1=False


    # TELA DE GAME OVER
    elif uni_pos == mino1_pos or uni_pos == mino2_pos or uni_pos == mino3_pos:
        
        canal2.play(lose)
        w=11
        dead_screen = True

        dot = pygame.Surface((800,800))
        dot.fill(preto)
        playSurface.blit(dot,(0,0))

        while dead_screen:

            text = fonte100.render('GAME OVER', 1, vermelho)
            playSurface.blit(text, (190,170))
            playSurface.blit(dead, (290,360))

            text = fonte50.render('Press Any Key To Try Again', 1, vermelho)
            playSurface.blit(text, (180,700))
            dot = pygame.Surface((100,100))
            dot.fill(preto)
            playSurface.blit(dot,(389,749))
            text = fonte50.render(str(w), 1, vermelho)
            playSurface.blit(text, (390,750))
            pygame.display.update()
            w=w-1
            time.sleep(1)

            text = fonte50.render('Press Any Key To Try Again', 1, preto)
            playSurface.blit(text, (180,700))
            playSurface.blit(text, (180,700))
            playSurface.blit(text, (180,700))
            dot = pygame.Surface((100,100))
            dot.fill(preto)
            playSurface.blit(dot,(389,749))
            text = fonte50.render(str(w), 1, vermelho)
            playSurface.blit(text, (390,750))
            pygame.display.update()
            w=w-1
            time.sleep(1)

            if w<=0:
                pygame.quit()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                if event.type == pygame.MOUSEBUTTONDOWN or event.type == pygame.KEYDOWN:

                    score=score-10000
                    if score < 0:
                        score=0
                    erase_score = pygame.Surface((400,35))
                    erase_score.fill(preto)
                    playSurface.blit(erase_score,(0,805))
                    uni_x=40
                    uni_y=360
                    uni_pos = (uni_x,uni_y)
                    cup_x = 80
                    cup_y = 280
                    cup_pos = (cup_x,cup_y)
                    mino1_x = 440
                    mino1_y = 480
                    mino1_pos = (mino1_x,mino1_y)
                    mino2_x = 120
                    mino2_y = 600
                    mino2_pos = (mino2_x,mino2_y)
                    mino3_x = 560
                    mino3_y = 640
                    mino3_pos = (mino3_x,mino3_y)
                    mino_count=0
                    dot = pygame.Surface((800,800))
                    dot.fill(preto)
                    playSurface.blit(dot,(0,0))
                    try:
                        i=0
                        for m in maze6_1_random:
                            canal2.play(build_sound)
                            dot_maze = pygame.Surface((40,40))
                            dot_maze.fill(azul_claro)
                            dot_maze_pos = maze6_1_random[i]
                            playSurface.blit(dot_maze,dot_maze_pos)
                            i=i+1
                            pygame.display.update()

                            time.sleep(0.008)

                    except:
                        i=0
                        for m in maze6_1:
                            canal2.play(build_sound)
                            dot_maze = pygame.Surface((40,40))
                            dot_maze.fill(azul_claro)
                            dot_maze_pos = maze6_1[i]
                            playSurface.blit(dot_maze,dot_maze_pos)
                            i=i+1
                            pygame.display.update()

                            time.sleep(0.008)

                    fase6_1=True
                    is_moving_up = False
                    is_moving_down = False
                    is_moving_right = False
                    is_moving_left = False
                    dead_screen = False




# TELA DE FASE CONCLUIDA
dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))
pygame.display.update()

canal2.play(win)
i=0
while i<4:
    text = fonte100.render('STAGE COMPLETED', 1, amarelo)
    playSurface.blit(text, (70,160))

    playSurface.blit(giant_cup, (180,280))

    pygame.display.update()
    time.sleep(1/3)

    text = fonte100.render('STAGE COMPLETED', 1, preto)
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))

    pygame.display.update()
    time.sleep(1/3)

    i=i+1

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))







# SETIMA FASE DO JOGO
time.sleep(1)
pygame.mixer.music.load('intro.wav')
pygame.mixer.music.play(5)
time.sleep(1)

i=0
while i<6:

    if i<3:
        text = fonte70.render('STAGE 7:', 1, amarelo)
        playSurface.blit(text, (300,300))
        pygame.display.update()
        time.sleep(1/4)

    text = fonte70.render('STAGE 7:', 1, preto)
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/4)

    text = fonte70.render('STAGE 7:', 1, vermelho)
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    text = fonte70.render('STAGE 7:', 1, preto)
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/4)

    i=i+1


dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))


# DEFINE AS POSIÇÕES INICIAIS 

i=0
while i==0:

    uni_x= 380
    uni_y= 760
    uni_pos = (uni_x,uni_y)

    cup_x = 400 
    cup_y = 380
    cup_pos = (cup_x,cup_y)

    cof1_pos=(460,60)
    cof2_pos=(620,140)
    cof3_pos=(260,400)
    cof4_pos=(100,760)
    see_cof1=0
    see_cof2=0
    see_cof3=0
    see_cof4=0

    if(uni_pos != cup_pos): 
        i=1




# ANIMAÇÃO DE GERAR LABIRINTO
try:
    i=0
    for m in maze7_random:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((20,20))
        dot_maze.fill(vermelho)
        dot_maze_pos = maze7_random[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.01)

except:
    i=0
    for m in maze7:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((20,20))
        dot_maze.fill(vermelho)
        dot_maze_pos = maze7[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.01)






# JAGABILIDADE DA FASE 7
fase7=True
is_moving_up = False
is_moving_down = False
is_moving_right = False
is_moving_left = False
while fase7:

    text = fonte30.render('SCORE: ', 1, branco)
    playSurface.blit(text, (20,815))
    text = fonte50.render(str(num6dig(score)), 1, branco)
    playSurface.blit(text, (110,805))

    caminho_livre = True
    uni_x_temp = uni_x
    uni_y_temp = uni_y
    uni_pos_temp = (uni_x_temp,uni_y_temp)



    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()
       

        if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
            is_moving_up = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
            is_moving_up = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
            is_moving_down = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
            is_moving_down = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            is_moving_right = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
            is_moving_right = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
            is_moving_left = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
            is_moving_left = False

    if is_moving_up==True:
        uni_y_temp = uni_y-20
    if is_moving_down==True:
        uni_y_temp = uni_y+20
    if is_moving_left==True:
        uni_x_temp = uni_x-20
        uni = uni_left
    if is_moving_right==True:
        uni_x_temp = uni_x+20
        uni = uni_right
    

        
    time.sleep(0.08)        
    uni_pos_temp = (uni_x_temp,uni_y_temp)

        

    i=0
    for m in maze7: 
        verificar = maze7[i]               
        if verificar == uni_pos_temp:
            caminho_livre=False
        i=i+1


    if caminho_livre == True:

        dot = pygame.Surface((20,20))
        dot.fill(preto)
        dot_pos = uni_pos
        playSurface.blit(dot,dot_pos)

        uni_pos = uni_pos_temp
        uni_x = uni_x_temp
        uni_y = uni_y_temp

        playSurface.blit(uni,uni_pos)
        playSurface.blit(cup,cup_pos)
        
    else:

        uni_pos = (uni_x,uni_y)
        playSurface.blit(uni,uni_pos)
        playSurface.blit(cup,cup_pos)
       

    if uni_pos == cof1_pos:
        if see_cof1==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof1 = see_cof1+1
    if see_cof1==0:
        playSurface.blit(cof,cof1_pos)

    if uni_pos == cof2_pos:
        if see_cof2==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof2 = see_cof2+1
    if see_cof2==0:
        playSurface.blit(cof,cof2_pos)

    if uni_pos == cof3_pos:
        if see_cof3==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof3 = see_cof3+1
    if see_cof3==0:
        playSurface.blit(cof,cof3_pos)
   
    if uni_pos == cof4_pos:
        if see_cof4==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof4 = see_cof4+1
    if see_cof4==0:
        playSurface.blit(cof,cof4_pos)


    
    pygame.display.update()

    if uni_pos == cup_pos:  
        score = score + 5000
        erase_score = pygame.Surface((400,35))
        erase_score.fill(preto)
        playSurface.blit(erase_score,(0,805))
        pygame.display.update()
        fase7=False




# TELA DE FASE CONCLUIDA
dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))
pygame.display.update()

canal2.play(win)
i=0
while i<4:
    text = fonte100.render('STAGE COMPLETED', 1, amarelo)
    playSurface.blit(text, (70,160))

    playSurface.blit(giant_cup, (180,280))

    pygame.display.update()
    time.sleep(1/3)

    text = fonte100.render('STAGE COMPLETED', 1, preto)
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))
    playSurface.blit(text, (70,160))

    pygame.display.update()
    time.sleep(1/3)

    i=i+1

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))
playSurface.blit(dot,(0,0))
time.sleep(2)






# OITAVA FASE DO JOGO
i=0
while i<4:

    text = fonte70.render('STAGE 8:', 1, vermelho)
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    text = fonte70.render('STAGE 8:', 1, preto)
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    playSurface.blit(text, (300,300))
    pygame.display.update()
    time.sleep(1/5)

    i=i+1

dot = pygame.Surface((800,840))
dot.fill(preto)
playSurface.blit(dot,(0,0))



# DEFINE AS POSIÇÕES INICIAIS



uni_x= 740
uni_y= 40
uni_pos = (uni_x,uni_y)

cup_x = 380
cup_y = 380
cup_pos = (cup_x,cup_y)

cof1_pos=(20,720)
cof2_pos=(520,280)
cof3_pos=(720,340)
see_cof1=0
see_cof2=0
see_cof3=0
see_cof4=0
see_cof5=0
see_cof6=0
see_cof7=0
see_cof8=0
see_cof9=0
see_cof10=0
see_cof11=0
see_cof12=0
see_cof13=0
see_cof14=0

   




# ANIMAÇÃO DE GERAR LABIRINTO
try:
    i=0
    for m in maze8_1_random:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((20,20))
        dot_maze.fill(amarelo)
        dot_maze_pos = maze8_1_random[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.003)

except:
    i=0
    for m in maze8_1:
        canal2.play(build_sound)
        dot_maze = pygame.Surface((20,20))
        dot_maze.fill(amarelo)
        dot_maze_pos = maze8_1[i]
        playSurface.blit(dot_maze,dot_maze_pos)
        i=i+1
        pygame.display.update()

        time.sleep(0.003)



# JAGABILIDADE DA FASE 8
fase8=True
is_moving_up = False
is_moving_down = False
is_moving_right = False
is_moving_left = False
while fase8:

    text = fonte30.render('SCORE: ', 1, branco)
    playSurface.blit(text, (20,815))
    text = fonte50.render(str(num6dig(score)), 1, branco)
    playSurface.blit(text, (110,805))

    caminho_livre = True
    uni_x_temp = uni_x
    uni_y_temp = uni_y
    uni_pos_temp = (uni_x_temp,uni_y_temp)



    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()
       

        if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
            is_moving_up = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_UP:
            is_moving_up = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
            is_moving_down = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:
            is_moving_down = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            is_moving_right = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_RIGHT:
            is_moving_right = False

        if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
            is_moving_left = True
        elif event.type == pygame.KEYUP and event.key == pygame.K_LEFT:
            is_moving_left = False

    if is_moving_up==True:
        uni_y_temp = uni_y-20
    if is_moving_down==True:
        uni_y_temp = uni_y+20
    if is_moving_left==True:
        uni_x_temp = uni_x-20
        uni = uni_left
    if is_moving_right==True:
        uni_x_temp = uni_x+20
        uni = uni_right
    

        
    time.sleep(0.08)        
    uni_pos_temp = (uni_x_temp,uni_y_temp)

        

    i=0
    for m in maze8_1: 
        verificar = maze8_1[i]               
        if verificar == uni_pos_temp:
            caminho_livre=False
        i=i+1


    if caminho_livre == True:

        dot = pygame.Surface((20,20))
        dot.fill(preto)
        dot_pos = uni_pos
        playSurface.blit(dot,dot_pos)

        uni_pos = uni_pos_temp
        uni_x = uni_x_temp
        uni_y = uni_y_temp

        playSurface.blit(uni,uni_pos)
        playSurface.blit(cup,cup_pos)
        
    else:

        uni_pos = (uni_x,uni_y)
        playSurface.blit(uni,uni_pos)
        playSurface.blit(cup,cup_pos)
       

    if uni_pos == cof1_pos:
        if see_cof1==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof1 = see_cof1+1
    if see_cof1==0:
        playSurface.blit(cof,cof1_pos)

    if uni_pos == cof2_pos:
        if see_cof2==0:
            canal2.play(cof_sound)
            score = score + 1000
            erase_score = pygame.Surface((400,35))
            erase_score.fill(preto)
            playSurface.blit(erase_score,(0,805))
            pygame.display.update()
        see_cof2 = see_cof2+1
    if see_cof2==0:
        playSurface.blit(cof,cof2_pos)

    if uni_pos == cof3_pos:
        if